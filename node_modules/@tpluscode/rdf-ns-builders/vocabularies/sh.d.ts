import { NamespaceBuilder } from "@rdf-esm/namespace";
import { NamedNode } from "rdf-js";
declare type Sh = NamespaceBuilder & {
    "AbstractResult": NamedNode;
    "AndConstraintComponent-and": NamedNode;
    "AndConstraintComponent": NamedNode;
    "BlankNode": NamedNode;
    "BlankNodeOrIRI": NamedNode;
    "BlankNodeOrLiteral": NamedNode;
    "ClassConstraintComponent-class": NamedNode;
    "ClassConstraintComponent": NamedNode;
    "ClosedConstraintComponent-closed": NamedNode;
    "ClosedConstraintComponent-ignoredProperties": NamedNode;
    "ClosedConstraintComponent": NamedNode;
    "ConstraintComponent": NamedNode;
    "DatatypeConstraintComponent-datatype": NamedNode;
    "DatatypeConstraintComponent": NamedNode;
    "DisjointConstraintComponent-disjoint": NamedNode;
    "DisjointConstraintComponent": NamedNode;
    "EqualsConstraintComponent-equals": NamedNode;
    "EqualsConstraintComponent": NamedNode;
    "ExpressionConstraintComponent-expression": NamedNode;
    "ExpressionConstraintComponent": NamedNode;
    "Function": NamedNode;
    "HasValueConstraintComponent-hasValue": NamedNode;
    "HasValueConstraintComponent": NamedNode;
    "IRI": NamedNode;
    "IRIOrLiteral": NamedNode;
    "InConstraintComponent-in": NamedNode;
    "InConstraintComponent": NamedNode;
    "Info": NamedNode;
    "JSConstraint-js": NamedNode;
    "JSConstraint": NamedNode;
    "JSConstraintComponent": NamedNode;
    "JSExecutable": NamedNode;
    "JSFunction": NamedNode;
    "JSLibrary": NamedNode;
    "JSRule": NamedNode;
    "JSTarget": NamedNode;
    "JSTargetType": NamedNode;
    "JSValidator": NamedNode;
    "LanguageInConstraintComponent-languageIn": NamedNode;
    "LanguageInConstraintComponent": NamedNode;
    "LessThanConstraintComponent-lessThan": NamedNode;
    "LessThanConstraintComponent": NamedNode;
    "LessThanOrEqualsConstraintComponent-lessThanOrEquals": NamedNode;
    "LessThanOrEqualsConstraintComponent": NamedNode;
    "Literal": NamedNode;
    "MaxCountConstraintComponent-maxCount": NamedNode;
    "MaxCountConstraintComponent": NamedNode;
    "MaxExclusiveConstraintComponent-maxExclusive": NamedNode;
    "MaxExclusiveConstraintComponent": NamedNode;
    "MaxInclusiveConstraintComponent-maxInclusive": NamedNode;
    "MaxInclusiveConstraintComponent": NamedNode;
    "MaxLengthConstraintComponent-maxLength": NamedNode;
    "MaxLengthConstraintComponent": NamedNode;
    "MinCountConstraintComponent-minCount": NamedNode;
    "MinCountConstraintComponent": NamedNode;
    "MinExclusiveConstraintComponent-minExclusive": NamedNode;
    "MinExclusiveConstraintComponent": NamedNode;
    "MinInclusiveConstraintComponent-minInclusive": NamedNode;
    "MinInclusiveConstraintComponent": NamedNode;
    "MinLengthConstraintComponent-minLength": NamedNode;
    "MinLengthConstraintComponent": NamedNode;
    "NodeConstraintComponent-node": NamedNode;
    "NodeConstraintComponent": NamedNode;
    "NodeKind": NamedNode;
    "NodeKindConstraintComponent-nodeKind": NamedNode;
    "NodeKindConstraintComponent": NamedNode;
    "NodeShape": NamedNode;
    "NotConstraintComponent-not": NamedNode;
    "NotConstraintComponent": NamedNode;
    "OrConstraintComponent-or": NamedNode;
    "OrConstraintComponent": NamedNode;
    "Parameter": NamedNode;
    "Parameterizable": NamedNode;
    "PatternConstraintComponent-flags": NamedNode;
    "PatternConstraintComponent-pattern": NamedNode;
    "PatternConstraintComponent": NamedNode;
    "PrefixDeclaration": NamedNode;
    "PropertyConstraintComponent-property": NamedNode;
    "PropertyConstraintComponent": NamedNode;
    "PropertyGroup": NamedNode;
    "PropertyShape": NamedNode;
    "QualifiedMaxCountConstraintComponent-qualifiedMaxCount": NamedNode;
    "QualifiedMaxCountConstraintComponent-qualifiedValueShape": NamedNode;
    "QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint": NamedNode;
    "QualifiedMaxCountConstraintComponent": NamedNode;
    "QualifiedMinCountConstraintComponent-qualifiedMinCount": NamedNode;
    "QualifiedMinCountConstraintComponent-qualifiedValueShape": NamedNode;
    "QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint": NamedNode;
    "QualifiedMinCountConstraintComponent": NamedNode;
    "ResultAnnotation": NamedNode;
    "Rule": NamedNode;
    "SPARQLAskExecutable": NamedNode;
    "SPARQLAskValidator": NamedNode;
    "SPARQLConstraint": NamedNode;
    "SPARQLConstraintComponent-sparql": NamedNode;
    "SPARQLConstraintComponent": NamedNode;
    "SPARQLConstructExecutable": NamedNode;
    "SPARQLExecutable": NamedNode;
    "SPARQLFunction": NamedNode;
    "SPARQLRule": NamedNode;
    "SPARQLSelectExecutable": NamedNode;
    "SPARQLSelectValidator": NamedNode;
    "SPARQLTarget": NamedNode;
    "SPARQLTargetType": NamedNode;
    "SPARQLUpdateExecutable": NamedNode;
    "Severity": NamedNode;
    "Shape": NamedNode;
    "Target": NamedNode;
    "TargetType": NamedNode;
    "TripleRule": NamedNode;
    "UniqueLangConstraintComponent-uniqueLang": NamedNode;
    "UniqueLangConstraintComponent": NamedNode;
    "ValidationReport": NamedNode;
    "ValidationResult": NamedNode;
    "Validator": NamedNode;
    "Violation": NamedNode;
    "Warning": NamedNode;
    "XoneConstraintComponent-xone": NamedNode;
    "XoneConstraintComponent": NamedNode;
    "alternativePath": NamedNode;
    "and": NamedNode;
    "annotationProperty": NamedNode;
    "annotationValue": NamedNode;
    "annotationVarName": NamedNode;
    "ask": NamedNode;
    "class": NamedNode;
    "closed": NamedNode;
    "condition": NamedNode;
    "conforms": NamedNode;
    "construct": NamedNode;
    "datatype": NamedNode;
    "deactivated": NamedNode;
    "declare": NamedNode;
    "defaultValue": NamedNode;
    "description": NamedNode;
    "detail": NamedNode;
    "disjoint": NamedNode;
    "entailment": NamedNode;
    "equals": NamedNode;
    "expression": NamedNode;
    "filterShape": NamedNode;
    "flags": NamedNode;
    "focusNode": NamedNode;
    "group": NamedNode;
    "hasValue": NamedNode;
    "ignoredProperties": NamedNode;
    "in": NamedNode;
    "intersection": NamedNode;
    "inversePath": NamedNode;
    "js": NamedNode;
    "jsFunctionName": NamedNode;
    "jsLibrary": NamedNode;
    "jsLibraryURL": NamedNode;
    "labelTemplate": NamedNode;
    "languageIn": NamedNode;
    "lessThan": NamedNode;
    "lessThanOrEquals": NamedNode;
    "maxCount": NamedNode;
    "maxExclusive": NamedNode;
    "maxInclusive": NamedNode;
    "maxLength": NamedNode;
    "message": NamedNode;
    "minCount": NamedNode;
    "minExclusive": NamedNode;
    "minInclusive": NamedNode;
    "minLength": NamedNode;
    "name": NamedNode;
    "namespace": NamedNode;
    "node": NamedNode;
    "nodeKind": NamedNode;
    "nodeValidator": NamedNode;
    "nodes": NamedNode;
    "not": NamedNode;
    "object": NamedNode;
    "oneOrMorePath": NamedNode;
    "optional": NamedNode;
    "or": NamedNode;
    "order": NamedNode;
    "parameter": NamedNode;
    "path": NamedNode;
    "pattern": NamedNode;
    "predicate": NamedNode;
    "prefix": NamedNode;
    "prefixes": NamedNode;
    "property": NamedNode;
    "propertyValidator": NamedNode;
    "qualifiedMaxCount": NamedNode;
    "qualifiedMinCount": NamedNode;
    "qualifiedValueShape": NamedNode;
    "qualifiedValueShapesDisjoint": NamedNode;
    "result": NamedNode;
    "resultAnnotation": NamedNode;
    "resultMessage": NamedNode;
    "resultPath": NamedNode;
    "resultSeverity": NamedNode;
    "returnType": NamedNode;
    "rule": NamedNode;
    "select": NamedNode;
    "severity": NamedNode;
    "shapesGraph": NamedNode;
    "shapesGraphWellFormed": NamedNode;
    "sourceConstraint": NamedNode;
    "sourceConstraintComponent": NamedNode;
    "sourceShape": NamedNode;
    "sparql": NamedNode;
    "subject": NamedNode;
    "suggestedShapesGraph": NamedNode;
    "target": NamedNode;
    "targetClass": NamedNode;
    "targetNode": NamedNode;
    "targetObjectsOf": NamedNode;
    "targetSubjectsOf": NamedNode;
    "this": NamedNode;
    "union": NamedNode;
    "uniqueLang": NamedNode;
    "update": NamedNode;
    "validator": NamedNode;
    "value": NamedNode;
    "xone": NamedNode;
    "zeroOrMorePath": NamedNode;
    "zeroOrOnePath": NamedNode;
};
export declare const sh: Sh;
export {};
//# sourceMappingURL=sh.d.ts.map