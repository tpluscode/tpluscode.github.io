"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jsonLdParser = jsonLdParser;
exports.n3Parser = n3Parser;
exports.rdfXmlParser = rdfXmlParser;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

async function jsonLdParser() {
  const JsonLdParser = (await Promise.resolve().then(() => _interopRequireWildcard(require('@rdfjs/parser-jsonld')))).default;
  return new JsonLdParser();
}

async function n3Parser() {
  const N3Parser = (await Promise.resolve().then(() => _interopRequireWildcard(require('@rdfjs/parser-n3')))).default;
  return new N3Parser();
}

async function rdfXmlParser() {
  const module = await Promise.resolve().then(() => _interopRequireWildcard(require('rdfxml-streaming-parser')));
  let RdfXmlParser;

  if (module.default) {
    RdfXmlParser = module.default.RdfXmlParser;
  } else {
    RdfXmlParser = module.RdfXmlParser;
  }

  return new RdfXmlParser();
}