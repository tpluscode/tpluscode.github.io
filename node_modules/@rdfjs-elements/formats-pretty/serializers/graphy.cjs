"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trig = exports.rdfXml = exports.turtle = void 0;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

async function serializer(importScribe) {
  const create = (await importScribe).default;
  return {
    import(quadStream, {
      prefixes = {}
    } = {}) {
      const writer = create({
        prefixes
      });
      writer.import(quadStream);
      return writer;
    }

  };
}

const turtle = () => serializer(Promise.resolve().then(() => _interopRequireWildcard(require('@graphy/content.ttl.scribe'))));

exports.turtle = turtle;

const rdfXml = () => serializer(Promise.resolve().then(() => _interopRequireWildcard(require('@graphy/content.xml.scribe'))));

exports.rdfXml = rdfXml;

const trig = () => serializer(Promise.resolve().then(() => _interopRequireWildcard(require('@graphy/content.trig.scribe'))));

exports.trig = trig;