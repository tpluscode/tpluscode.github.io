"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formats = exports.parsers = exports.serializers = void 0;

var formatsCommon = _interopRequireWildcard(require("@rdf-esm/formats-common"));

var _sinkMap = require("@rdf-esm/sink-map");

var graphy = _interopRequireWildcard(require("./serializers/graphy.cjs"));

var _jsonld = _interopRequireDefault(require("./serializers/jsonld.cjs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const serializers = new _sinkMap.SinkMap([...formatsCommon.serializers]);
exports.serializers = serializers;
const parsers = new _sinkMap.SinkMap([...formatsCommon.parsers]);
exports.parsers = parsers;
const formats = {
  jsonLd: 'application/ld+json',
  ntriples: 'application/n-triples',
  nquads: 'application/n-quads',
  notation3: 'text/n3',
  rdfXml: 'application/rdf+xml',
  trig: 'application/trig',
  turtle: 'text/turtle'
};
exports.formats = formats;
serializers.set(formats.jsonLd, _jsonld.default);
serializers.set(formats.notation3, graphy.turtle);
serializers.set(formats.turtle, graphy.turtle);
serializers.set(formats.trig, graphy.trig);
serializers.set(formats.rdfXml, graphy.rdfXml);