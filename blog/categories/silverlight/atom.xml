<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: silverlight | Tomasz Pluskiewicz]]></title>
  <link href="http://t-code.pl/blog/categories/silverlight/atom.xml" rel="self"/>
  <link href="http://t-code.pl/"/>
  <updated>2021-03-28T12:28:09+00:00</updated>
  <id>http://t-code.pl/</id>
  <author>
    <name><![CDATA[Tomasz Pluskiewicz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Disable "Missing XML documentation" warnings for WCF RIA Services]]></title>
    <link href="http://t-code.pl/blog/2012/05/disable-missing-xml-documentation-warnings-for-wcf-ria-services/"/>
    <updated>2012-05-09T11:38:24-04:00</updated>
    <id>http://t-code.pl/blog/2012/05/disable-missing-xml-documentation-warnings-for-wcf-ria-services</id>
    <content type="html"><![CDATA[<p>Every project should be well documented and Visual Studio has the option to enforce XML code documentation by generating
warnings when there is a comment missing, a parameter description missing and such. It can be enabled per project by
enabling XML documentation file option on the Build tab.</p>

<p>There are however cases, when it is not necessary for XML docs to be present.</p>

<!--more-->

<p>If so, C# has the #pragma keyword. In a single file you can use it as shown below:</p>

<p>``` c#
#pragma warning disable 1591
  // only ignore warning CS1591</p>

<h1 id="pragma-warning-restore-1591">pragma warning restore 1591</h1>
<p>// all warnings restorer</p>

<h1 id="pragma-warning-disable">pragma warning disable</h1>
<p>// no warnings here</p>

<h1 id="pragma-warning-restore">pragma warning restore</h1>
<p>// warnings will be shown here</p>

<h1 id="pragma-warning-disable-1">pragma warning disable</h1>
<p>// no warnings until end of file
```</p>

<p>But what if the warning comes from a generated file? #pragma is not an option because the file is likely to be
overwritten in the future (next build?). <a href="http://lvquoc.blogspot.com/2010/11/disable-xml-comment-warning-in-workflow.html">Quoc Lam has posted about this on his blog</a>. His method is working
for auto-generated XAML files but what I needed was disabling warnings in files created by <a href="http://www.silverlight.net/learn/advanced-techniques/wcf-ria-services/get-started-with-wcf-ria-services">RIA Services</a>.
Simmilarily to Quamâ€™s method it is possible to add an MSBuild target to the project in question, which add
<code>#pragma warning disable</code> line at the beginning of RIA generated files:</p>

<p>``` xml</p>
<Target Name="CreateRiaClientFilesTaskDisableWarnings" AfterTargets="CreateRiaClientFiles">
  <Exec Command="for %%f in (@(RiaClientGeneratedFiles)) do echo #pragma warning disable &gt; %%f.temp" />
  <Exec Command="for %%f in (@(RiaClientGeneratedFiles)) do type %%f &gt;&gt; %%f.temp" />
  <Exec Command="for %%f in (@(RiaClientGeneratedFiles)) do attrib -r %%f" />
  <Exec Command="for %%f in (@(RiaClientGeneratedFiles)) do move /y %%f.temp %%f" />
  <Exec Command="for %%f in (@(RiaClientGeneratedFiles)) do attrib +r %%f" />
  <Message Text="CreateRiaClientFilesTaskDisableWarnings: @(RiaClientGeneratedFiles)" />
</Target>
<p>```</p>

<p>For some reason RIA creates those files read-only, hence usage of the attrib tool</p>

<p>Voila, no RIA-related warnings any more coming from the generated files.</p>

]]></content>
  </entry>
  
</feed>
