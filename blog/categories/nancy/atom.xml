<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nancy | Tomasz Pluskiewicz]]></title>
  <link href="http://t-code.pl/blog/categories/nancy/atom.xml" rel="self"/>
  <link href="http://t-code.pl/"/>
  <updated>2021-03-28T12:28:09+00:00</updated>
  <id>http://t-code.pl/</id>
  <author>
    <name><![CDATA[Tomasz Pluskiewicz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Towards server-side routing with URI Templates (RFC 6570)]]></title>
    <link href="http://t-code.pl/blog/2016/11/Towards-server-side-routing-with-URI-Templates/"/>
    <updated>2016-11-13T23:15:00+00:00</updated>
    <id>http://t-code.pl/blog/2016/11/Towards-server-side-routing-with-URI-Templates</id>
    <content type="html"><![CDATA[<p>There are many MVC frameworks out there and all of them share a common feature - routing. Most libraries use a form of
URI patterns to match incoming requests. On top of powerful features like limiting allowed values to certain types or
by using regular expressions, they all share a common flaw - great simplification of the <a href="https://tools.ietf.org/html/rfc3986">URI</a>.</p>

<p>There is however a similar <a href="https://en.wikipedia.org/wiki/Internet_Standard#Proposed_Standard">proposed standard</a> described by <a href="https://tools.ietf.org/html/rfc6570">RFC 6570</a> and appropriately called <strong>URI Template</strong>
As the name implies, it defines URI patterns which can be then expanded to actual URIs by substituting variables and work
the opposite way by extracting variables from a given URI. This makes it a viable option for matching request URIs on the
server to determine what code to execute, if any.</p>

<!--more-->

<h2 id="so-what-is-wrong-with-typical-routing">So what is wrong with typical routing?</h2>

<p>In most libraries I have seen routing is declared simply by defining variables as URI segments:</p>

<ul>
  <li><a href="https://docs.djangoproject.com/en/1.10/topics/http/urls/">Django</a> is all about regex:
    <ul>
      <li><code>r'^blog/page(?P&lt;num&gt;[0-9]+)/$'</code></li>
    </ul>
  </li>
  <li><a href="https://github.com/NancyFx/Nancy/wiki/Defining-routes">Nancy</a>, <a href="https://www.asp.net/web-api/overview/web-api-routing-and-actions/routing-in-aspnet-web-api">ASP.NET Web API</a>, <a href="https://github.com/ServiceStack/ServiceStack/wiki/Routing">Service Stack</a> or <a href="http://www.baeldung.com/spring-requestmapping">Spring</a> support a form of simplified URI Templates but extended with optional constraints:
    <ul>
      <li><code>/content/{Version*}/literal/{Slug*}</code> - greedy segments (All)</li>
      <li><code>/ex/bars/{numericId:[\\d]+}</code> - number-only segment (Spring)</li>
      <li><code>users/{id:int}</code> number-only segment (Nancy, Web API)</li>
    </ul>
  </li>
  <li><a href="https://github.com/NancyFx/Nancy/wiki/Defining-routes">Nancy</a> also does regular expressions:
    <ul>
      <li><code>/(?&lt;age&gt;[\d]{1,2})</code></li>
    </ul>
  </li>
  <li><a href="https://metacpan.org/pod/Dancer2::Manual#Route-Handlers">Dancer</a> and <a href="http://expressjs.com/en/guide/routing.html">Express</a> use a similar syntax and also support regular expressions:
    <ul>
      <li><code>/users/:userId/books/:bookId</code> (Both)</li>
      <li><code>/team/:team/**</code> (Dancer)</li>
      <li><code>/ab(cd)?e</code> (Express)</li>
    </ul>
  </li>
</ul>

<p>The features to constrain segments to specific values using regular expression or some custom feature certainly is a
powerful one but there is much more to URL than just segments (not to mention URI in general). The general syntax of an
URL is as follows:</p>

<p><code>
scheme:[//[user:password@]host[:port]][/]path[?query][#fragment]
</code></p>

<p>In a web application the scheme will usually be HTTP(S). Let’s also ignore the user/password and host/port which aren’t
usually the concern of a REST server accepting requests. That leaves us with the <a href="https://tools.ietf.org/html/rfc3986#section-3.3">path</a>, <a href="https://tools.ietf.org/html/rfc3986#section-3.4">query</a> 
and <a href="https://tools.ietf.org/html/rfc3986#section-3.5">fragment</a>.</p>

<blockquote>
  <p>Do you notice already how typical routing completely neglects query and fragment?</p>
</blockquote>

<p>In my opinion they should be part of it. Why, you ask? Read on!</p>

<h2 id="using-identifiers-like-you-probably-should">Using identifiers like you probably should</h2>

<h3 id="query-string-is-part-of-the-identifier">Query string is part of the identifier</h3>

<p>In a RESTful API the identifier is the complete URL. If the client does a request like</p>

<p><code>http
GET /user?id=123 HTTP/1.1 
</code></p>

<p>Why shouldn’t it be possible to include the query string parameter as part of the route? It is after all an integral part
of the identifier. Yet all libraries that I’ve worked with require manual work to extract the value of <code>id</code> in user code.</p>

<h3 id="segments-are-so-much-more-powerful">Segments are so much more powerful</h3>

<p>The URI path is a series of zero or more segments delimited by the slash <code>/</code> character. And so an absolute path like
<code>/users/tomasz/articles/uri-template</code> has four segments:</p>

<ul>
  <li>users</li>
  <li>tomasz</li>
  <li>articles</li>
  <li>uri-template</li>
</ul>

<p>But segments are not necessarily just text. And they certainly don’t have to represent hierarchy of file system folders.</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">A friendly <a href="https://twitter.com/hashtag/RESTful?src=hash">#RESTful</a> reminder - URL path does not represent file-system hierarchy. Heck, it doesn&#39;t have to be a hierarchy at all <a href="https://twitter.com/hashtag/hypermedia?src=hash">#hypermedia</a></p>&mdash; Tomasz Pluskiewicz (@tpluscode) <a href="https://twitter.com/tpluscode/status/797895110306369536">November 13, 2016</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>A little known feature, which I’ve only just discovered very recently, are parametrized path segments. They work similarly
to query strings:</p>

<p><code>
/segment1;param1=val1;param2=val2,val3/segment2
</code></p>

<p>See how <code>segment1</code> has extra bits attached. As JSON these parameters would be represented as</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">“param1”:</span> <span class="err">“val1”,</span>
</span><span class='line'>  <span class="err">“param2”:</span> <span class="err">[</span>
</span><span class='line'>    <span class="err">“val2”,</span>
</span><span class='line'>    <span class="err">“val3”</span>
</span><span class='line'>  <span class="err">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And here’s a practical example. A hypothetical API could serve a resource representing a collection of, say, books:
<code>http://example.rest/books</code>. Another resource could be used to retrieve covers of those books: <code>http://example.rest/books/gallery</code>.
Usually any manipulation of such resource is handed over ot query strings.</p>

<p>So, what if the resource owner wanted to offer a gallery of books cover but only books by Oscar Wilde and only covers in
PNG format. Because why not?</p>

<p>The URL would probably look like <code>http://example.rest/books/gallery?author=Oscar%20Wilde&amp;format=png</code>. Do you also see the
<a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">SRP</a> rule being validated? Why not instead use the URL like</p>

<p><code>
http://example.rest/books;author=Oscar%20Wilde/gallery;format=png
</code></p>

<p>And hey! Now it’s possible to just drop the last segment and leave</p>

<p><code>
http://example.rest/books;author=Oscar%20Wilde
</code></p>

<p>That looks like a resource containing books by Oscar Wilde. Despite the tweet quoted above, people do love URL hierarchies
right? They probably <em>are</em> quite useful in the end.</p>

<p>And it’s not just about <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">single responsibility</a> of path segments (there probably isn’t such a thing). I don’t have
empirical proof, but I would guess that parametrizing segments could lead to better controller/module/handler design.</p>

<h2 id="so-how-do-i-implement-that">So how do I implement that?</h2>

<p>Most languages probably have a library out there that implements the URI Template standard. So just go ahead a try to
replace the routing in your favourite Web framework so that it works with RFC6570 instead. The books covers resource route
shown above would become:</p>

<p><code>
/books{;author}/gallery{;format}
</code></p>

<p>Isn’t that nice? No query strings lurking in the implementation. Everything clear up front.</p>

<h3 id="my-nancy-experiment">My Nancy experiment</h3>

<p>I did precisely that and created a proof of concept in <a href="https://github.com/NancyFx/Nancy">Nancy</a>. It’s available on GitHub under 
<a href="https://github.com/tpluscode/nancy.routing.uritemplates">https://github.com/tpluscode/nancy.routing.uritemplates</a> and
hopefully I will make it into a useful library (there are still some issues to sort out).</p>

<p>In the current shape the usage is akin to implementing a typical Nancy application. Instead of <code>NancyModule</code> you implement
<code>UriTemplateModule</code> and replace the RouteResolver with <code>UriTemplateRouteResolver</code>. The actual route definition is just the
same:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">TestModule</span> <span class="p">:</span> <span class="n">UriTemplateModule</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">TestModule</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="err">“</span><span class="p">/</span><span class="n">books</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Get</span><span class="p">(</span><span class="err">“</span><span class="p">{;</span><span class="n">author</span><span class="p">}/</span><span class="n">gallery</span><span class="p">{;</span><span class="n">format</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="n">GetCoverGallery</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Such route will match <code>/books/gallery</code>, <code>/books;author=Shakespeare/gallery</code> and <code>/books/gallery;format=square</code>.</p>

<h2 id="possible-issues">Possible issues?</h2>

<p>Have you made that far? Great. Now it’s time to learn about the thorns that this rose has.</p>

<h3 id="route-variable-constrains">Route variable constrains</h3>

<p>In the beginning of this post I show how routing in existing libraries allow constraining captured variables using
custom syntax or regular expressions. The URI Templates specification has no such notion neither any extensibility mechanism.</p>

<p>This is not a great deal as far as I’m concerned. It should be possible to replicate the constraining functionality of
Nancy or Spring by extending variable template expressions. The standard does reserve some characters for future use and
they could serve as a separator between the variable name and the constraining expression. For example, to only allow
the page variable of a collection to be an integer the template could be</p>

<p><code>
/collection{/page|int}
</code></p>

<p>The pipe character is reserved and as such cannot be a legal part of the expression. As a consequence, a web framework
could reliably separate the <code>page</code> variable from the <code>int</code> constrain.</p>

<h3 id="route-prioritization">Route prioritization</h3>

<p>This is something I haven’t figured out yet. Nancy, and likely other libraries have the ability to work with multiple
routes matching a given URL. For example routes <code>/page/{title}/{sub}</code> and <code>/page/about/{sub}</code> would both match a
request for <code>/page/about/cats</code>. But because the <code>about</code> segment is an exact literal match in the latter route, that route
would actually be executed. It’s potentially a deal-breaker and I’m eager to find a solution to that problem.</p>

<h2 id="closing-words">Closing words</h2>

<p>I’m looking forward to your comments here or at the <a href="https://github.com/tpluscode/nancy.routing.uritemplates">Nancy.Routing.UriTemplates</a>
repository.</p>

<p>I’m quite convinced that URI Templates should have been used for routing from get-go. To me it seems quite obvious now
that hypermedia is becoming more and more recognized as an important design pattern and URI Templates are an important
part of driving the clients between application states. 
Being able to reuse the same technology on both client and server side should be very beneficial to visibility and maintainability
of hypermedia-driven APIs.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Problem Details for HTTP APIs and Nancy]]></title>
    <link href="http://t-code.pl/blog/2016/11/RFC-7807-and-Nancy/"/>
    <updated>2016-11-11T10:00:00+00:00</updated>
    <id>http://t-code.pl/blog/2016/11/RFC-7807-and-Nancy</id>
    <content type="html"><![CDATA[<p>There are a number of guidelines for returning errors from a REST API in a consistent way. Of course, API authors should
<a href="http://www.micheltriana.com/blog/2013/09/27/http-status-codes-in-rest-web-api">use status codes correctly</a> to signify
the result of an action. It is also a good idea to return some error details in resource representation. Some API vendors,
like Facebook or Twitter <a href="https://apigee.com/about/blog/technology/restful-api-design-what-about-errors">have come up with their own solutions</a>.</p>

<p>However, there is a Internet Engineering Task Force (IETF) proposed standard called <strong>Problem Details for HTTP APIs</strong>. It
was created be Mark Nottingham and is described in document <a href="https://tools.ietf.org/html/rfc7807">RFC 7807</a>. Interestingly
though there is fairly little support in for .NET Web API libraries and none for Nancy 1.x.</p>

<!--more-->

<p>Actually, I found precisely three NuGet packages: one for <a href="https://www.nuget.org/packages/HttpProblemDetails.Nancy">Nancy 2.0</a>,
one for <a href="https://www.nuget.org/packages/HttpProblemDetails.Nancy">ASP.NET Core</a> and one for <a href="https://www.nuget.org/packages/WebApiProblem/">ASP.NET Web API</a>.</p>

<p>Unfortunately there wasn’t one for the stable branch of Nancy, currently at 1.4.3.</p>

<h2 id="introducing-nancyproblemdetails">Introducing Nancy.ProblemDetails</h2>

<p>And so, I have created my own package I called <a href="https://www.nuget.org/packages/Nancy.ProblemDetails"><strong>Nancy.ProblemDetails</strong></a>.
It adds support for serializing JSON Problem Details and uses the library Tavis.Problem by Darrel Miller.</p>

<p>Do have a look at the repository for usage examples: <a href="https://github.com/tpluscode/Nancy.ProblemDetails">https://github.com/tpluscode/Nancy.ProblemDetails</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nancy Registrations class gotchas]]></title>
    <link href="http://t-code.pl/blog/2016/04/nancy-registration-gotchas/"/>
    <updated>2016-04-08T22:45:00+00:00</updated>
    <id>http://t-code.pl/blog/2016/04/nancy-registration-gotchas</id>
    <content type="html"><![CDATA[<p>I <a href="/blog/2016/03/strategy-pattern-nancy/">recently wrote</a> about the <code>Registrations</code> class of NancyFx. It is a great tool
for implementing reusable Nancy packages, which define all their DI requirements and does that with no dependency on any
concrete DI container.</p>

<p>Unfortunately every rose has its thorns and there are some limitations and the exact behaviour slightly differs between
containers. Read on to see what are the problems you can face when using the <code>Registrations</code> class for setting up your 
application.</p>

<!--more-->

<h2 id="the-tests">The tests</h2>

<p>I tried out numerous bootstrappers for Nancy and I was surprised that I observed different behaviour for different scenarios.
I decided to compile those scenarios as test cases and run them for all available Nancy bootstrapper packages. Each test
uses the <code>Browser</code> class from <a href="http://www.marcusoft.net/2013/01/NancyTesting1.html">Nancy.Testing</a> set up with the tested 
<code>Bootstrapper</code>. Then I perform a request to a test <code>NancyModule</code> check whether it was injected with correct dependencies.
Unfortunately the tests load all available registrations so they are not exactly independent. To achieve that I should
somehow choose only the relevant type somehow or partition the tests into separate assemblies but I’m not sure it would
be worth the trouble.</p>

<p>The tests are listed in <a href="https://github.com/tpluscode/Nancy.Boostrapper.Experiments/#the-tests">my repository’s readme</a>
so I’m not going to repeat them here. Below I will elaborate on how each of the bootstrappers did.</p>

<p>There are three general categories:</p>

<ol>
  <li>Autofac, Ninject, StructureMap and Windsor work in all tested scenarios</li>
  <li>TinyIoc, DryIoc, LightInject, MEF2 and Unity have some issues</li>
  <li>Grace and MEF are outdated and don’t work with latest Nancy at all</li>
</ol>

<h3 id="tinyioc-resolves-per-request-twice-when-autoregistration-is-on">TinyIoC resolves per-request twice when autoregistration is on</h3>

<p>The default bootstrapper scans available assemblies and registers all found types. This doesn’t play nice with explicit
registration of all implementations of a type.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">TestRegistrations</span> <span class="p">:</span> <span class="n">Registrations</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Registrations</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">RegisterAll</span><span class="p">&lt;</span><span class="n">ISmth</span><span class="p">&gt;(</span><span class="n">Lifetime</span><span class="p">.</span><span class="n">PerRequest</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}&lt;/</span><span class="n">ISmth</span><span class="p">&gt;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">class</span> <span class="nc">TestModule</span> <span class="p">:</span> <span class="n">NancyModule</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">TestModule</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">ISmth</span><span class="p">&gt;</span> <span class="n">instances</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// instances will have each implementation twice</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></ISmth></p>

<p>Interestingly this only happens if there is more than one implementation of the injected type.</p>

<h3 id="tinyioc-is-explicit-about-registering-and-resolving-collections-of-type">TinyIoC is explicit about registering and resolving collections of type</h3>

<p>On the other side of the spectrum for TinyIoC is registering multiple implementations on-by-one. I imagine that it could
be the case where there are multiple implementations of a dependency spread out among multiple libraries. Each lib could
have its own <code>Registrations</code> class and register a chosen implementation. It will not be possible to inject them all at
once to another type.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">TestRegistrations</span> <span class="p">:</span> <span class="n">Registrations</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Registrations</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Register</span><span class="p">&lt;</span><span class="n">ISmth</span><span class="p">&gt;(</span><span class="k">typeof</span><span class="p">(</span><span class="n">SmthImpl1</span><span class="p">));</span>
</span><span class='line'>        <span class="n">Register</span><span class="p">&lt;</span><span class="n">ISmth</span><span class="p">&gt;(</span><span class="k">typeof</span><span class="p">(</span><span class="n">SmthImpl2</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}&lt;/</span><span class="n">ISmth</span><span class="p">&gt;&lt;/</span><span class="n">ISmth</span><span class="p">&gt;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">class</span> <span class="nc">TestModule</span> <span class="p">:</span> <span class="n">NancyModule</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">TestModule</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">ISmth</span><span class="p">&gt;</span> <span class="n">instances</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// instances will be empty</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></ISmth></p>

<p>This by design according to the author of TinyIoC and to make this happen <code>RegisterAll&lt;T&gt;(IEnumerable&lt;Type&gt;)</code> should be
used instead. When called multiple times it would do the trick.</p>

<p>Curiously this test case passes when autoregistration is on and fails when it is off. That is obviously because they are
found during assembly scanning. TBH it’s a good reason to disable autoregistration altogether by default…</p>

<h3 id="dryioc-fails-to-inject-per-request-component-into-irequeststartup">DryIoc fails to inject per-request component into <code>IRequestStartup</code></h3>

<p><strong>UPDATE</strong>: DryIoc works fine in version 2.4. See <a href="https://github.com/lcssk8board/Nancy.Bootstrappers.DryIoc/issues/2">this issue</a></p>

<strike>Nancy comes with a handy pair of interfaces `IApplicationStartup` and `IRequestStartup` which when the application boots
up and at each request respectively. Think an alternative to `Global.asax` or WebActivator on steroids.</strike>

<strike>DryIoc currently fails to inject a per-request component into a request startup.</strike>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">RequestStartupRegistrations</span> <span class="p">:</span> <span class="n">Registrations</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">RequestStartupRegistrations</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Register</span><span class="p">&lt;</span><span class="n">InjectedIntoRequestStartup</span><span class="p">&gt;(</span><span class="n">Lifetime</span><span class="p">.</span><span class="n">PerRequest</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}&lt;/</span><span class="n">InjectedIntoRequestStartup</span><span class="p">&gt;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">class</span> <span class="nc">RequestStartupWithPerRequestInjection</span> <span class="p">:</span> <span class="n">IRequestStartup</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">RequestStartupWithPerRequestInjection</span><span class="p">(</span><span class="n">InjectedIntoRequestStartup</span> <span class="n">injected</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// this will not work at all - DryIoc throws an exception when resolving</span>
</span><span class='line'>    <span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">void</span> <span class="n">Initialize</span><span class="p">(</span><span class="n">IPipelines</span> <span class="n">pipelines</span><span class="p">,</span> <span class="n">NancyContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<strike>Big up to the author of DryIoc who already works on a solution!</strike>

<h3 id="mef2-seems-to-be-lacking-functionality">MEF2 seems to be lacking functionality</h3>

<p>I’m surprised by this bootstrapper. It turns out that <code>RegisterAll&lt;T&gt;()</code> has no effect on the registrations and request
startup classes are never even instantiated. I could also check <code>IApplicationStartup</code>.</p>

<h3 id="windsor-and-lightinject-are-different-with-per-request-resolutions">Windsor and LightInject are different with per-request resolutions</h3>

<p>This is not a bug or anything but something to be aware of. (All?) other bootstrapper create a child container for every
request and append additional per-request registrations each time. Windsor and LightInject on the other hand use scopes
and any registrations done directly on the container must be performed in the overridden <code>ConfigureApplicationContainer</code>
method.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">LightInjectBootstrapper</span> <span class="p">:</span> <span class="n">LightInjectNancyBootstrapper</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">ConfigureApplicationContainer</span><span class="p">(</span><span class="n">IServiceContainer</span> <span class="n">existingContainer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">existingContainer</span><span class="p">.</span><span class="n">Register</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">ISmth</span><span class="p">,</span> <span class="n">SmthImpl</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="k">new</span> <span class="n">PerScopeLifetime</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">class</span> <span class="nc">WindsorBootstrapper</span> <span class="p">:</span> <span class="n">WindsorNancyBootstrapper</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">ConfigureApplicationContainer</span><span class="p">(</span><span class="n">IWindsorContainer</span> <span class="n">existingContainer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">existingContainer</span><span class="p">.</span><span class="n">Register</span><span class="p">(</span><span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">ISmth</span><span class="p">&gt;().</span><span class="n">ImplementedBy</span><span class="p">&lt;</span><span class="n">SmthImpl</span><span class="p">&gt;().</span><span class="n">LifestyleTransient</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></SmthImpl></ISmth></p>

<p>This is very important, because although neither has the companion <code>ConfigureRequestContainer</code> method it’s easy to make
the mistake of registering dependencies in the <code>RequestStartup</code> method instead which will not work. I was ready to blame
Windsor bootstrapper until I read the instructions on the bootstrapper’s GitHub readme.</p>

<h3 id="lightinject-and-unity-dont-like-multiple-calls-to-registert">LightInject and Unity don’t like multiple calls to <code>Register&lt;T&gt;()</code></h3>

<p>Liking may have little to do with anything but the fact is that attempting to registerer a type multiple times will only
actually register one implementation. Interestingly it’s <strong>first wins</strong> with LightInject and <strong>last wins</strong> with Unity.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">TestRegistrations</span> <span class="p">:</span> <span class="n">Registrations</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Registrations</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Register</span><span class="p">&lt;</span><span class="n">ISmth</span><span class="p">&gt;(</span><span class="k">typeof</span><span class="p">(</span><span class="n">SmthImpl1</span><span class="p">));</span>
</span><span class='line'>        <span class="n">Register</span><span class="p">&lt;</span><span class="n">ISmth</span><span class="p">&gt;(</span><span class="k">typeof</span><span class="p">(</span><span class="n">SmthImpl2</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}&lt;/</span><span class="n">ISmth</span><span class="p">&gt;&lt;/</span><span class="n">ISmth</span><span class="p">&gt;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">class</span> <span class="nc">TestModule</span> <span class="p">:</span> <span class="n">NancyModule</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">TestModule</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">ISmth</span><span class="p">&gt;</span> <span class="n">instances</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// instances will only contain one element</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></ISmth></p>

<p>Although this is by design in both containers this behaviour differs from other bootstrapper. The workaround is to used
named registrations (see <a href="http://stackoverflow.com/a/16921451/1103498">here</a> and <a href="http://stackoverflow.com/a/31655143/1103498">here</a>)
directly in the bootstrapper.</p>

<h3 id="lightinject-and-unity-have-additional-version-requirements">LightInject and Unity have additional version requirements</h3>

<p>Didn’t know how to phrase that <img class="emoji" title=":wink:" alt=":wink:" src="https://assets.github.com/images/icons/emoji/unicode/1f609.png" height="20" width="20" align="absmiddle" />.</p>

<p>For Unity the problem is the dependency on the actual container package. The bootstrapper works with version 2.* and 3.*
but won’t with the latest 4.* release.</p>

<p>The latest LightInject bootstrapper is built for .NET 4.5.1 so if you target .NET &lt;= 4.5 you are out of luck.</p>

<h2 id="summary">Summary</h2>

<p>That’s it. I hope someone will find this post helpful when struggling with their Nancy bootstrap. Good luck.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strategy pattern and (one reason) why I love Nancy]]></title>
    <link href="http://t-code.pl/blog/2016/03/strategy-pattern-nancy/"/>
    <updated>2016-03-21T13:30:00+00:00</updated>
    <id>http://t-code.pl/blog/2016/03/strategy-pattern-nancy</id>
    <content type="html"><![CDATA[<p>The open-closed principle is the second letter of the <a href="https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID</a> acronym. SOLID is a set of software design guidelines 
which help build better software. The open-closed principle declares that</p>

<blockquote>
  <p>software entities should be open for extension, but closed for modification</p>
</blockquote>

<p>One way to satisfy this principle is through the use of the <a href="http://www.oodesign.com/strategy-pattern.html">Strategy design pattern</a>, sometimes called Policy. I’d
like to show how easy it is to employ this pattern in reusable and extensible components for a <a href="https://github.com/NancyFx/Nancy/">Nancy</a> application.</p>

<!--more-->

<p><img src="/uploads/2016/03/Set_of_security_screw_driver_bits.jpg" alt="screwdrivers" /></p>

<p>While implementing my <a href="https://github.com/wikibus/Argolis">Argolis</a> library I wanted to provide multiple extension points so that the behaviour can
be changed by consumers. For example there is an interface called <code>ISupportedClassMetaProvider</code> which return some basic
metadata about the given <code>Type</code>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">namespace</span> <span class="nn">Hydra.Discovery.SupportedClasses</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">interface</span> <span class="n">ISupportedClassMetaProvider</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">SupportedClassMeta</span> <span class="nf">GetMeta</span><span class="p">(</span><span class="n">Type</span> <span class="n">type</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The default implementation <code>DefaultSupportedClassMetaProvider</code> looks at the type name and <code>[Description]</code> attribute to
provide default label and description for a documented type. This can be changed by library consumers simply by creating
a custom implementation from scratch, inheriting from the default implementation or decorating it.</p>

<h2 id="registering-dependencies-with-nancy">Registering dependencies with Nancy</h2>

<p>This is where Nancy comes in with it’s magnificent extensibility model. In Nancy there is <code>IRegistrations</code> interface and
it’s abstract implementation called… <code>Registrations</code>. They provide simple abstraction over Dependency Injection, which
is an integral part of Nancy. This abstraction will only let you do basic DI registrations, but it should be enough. Here’s
an example setup which registers a shared instance of <code>IAppSettings</code> and an implementation of some <code>IUserContext</code>, which
will be resolved per-request.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Registrations</span> <span class="p">:</span> <span class="n">Nancy</span><span class="p">.</span><span class="n">Bootstrapper</span><span class="p">.</span><span class="n">Registrations</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Registrations</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Register</span><span class="p">&lt;</span><span class="n">IAppSettings</span><span class="p">&gt;(</span><span class="k">new</span> <span class="n">WebConfigSettings</span><span class="p">());</span>
</span><span class='line'>        <span class="n">Register</span><span class="p">&lt;</span><span class="n">IUserContext</span><span class="p">&gt;(</span><span class="k">typeof</span><span class="p">(</span><span class="n">UserContext</span><span class="p">),</span> <span class="n">Lifetime</span><span class="p">.</span><span class="n">PerRequest</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></IUserContext></IAppSettings></p>

<p>Nancy will discover implementations of <code>IRegistrations</code> at startup and translate <code>Register&lt;&gt;()</code> calls to the underlying
container. It is very important because Nancy supports <a href="https://github.com/NancyFx/Nancy/wiki/Container-Support">(m)any dependency injection container(s)</a> and
otherwise it would not be possible to create reusable assemblies agnostic of the chosen DI library.</p>

<h3 id="injecting-into-registrations">Injecting into <code>Registrations</code></h3>

<p>Because the very same container is used to create instances of <code>IRegistrations</code>, it is even possible to inject into them.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Registrations</span> <span class="p">:</span> <span class="n">Nancy</span><span class="p">.</span><span class="n">Bootstrapper</span><span class="p">.</span><span class="n">Registrations</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Registrations</span><span class="p">(</span><span class="n">IAppSettings</span> <span class="n">settings</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">settings</span><span class="p">.</span><span class="n">IsDebug</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Register</span><span class="p">&lt;</span><span class="n">IUserContext</span><span class="p">&gt;(</span><span class="k">typeof</span><span class="p">(</span><span class="n">TestUserContext</span><span class="p">),</span> <span class="n">Lifetime</span><span class="p">.</span><span class="n">Singleton</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">Register</span><span class="p">&lt;</span><span class="n">IUserContext</span><span class="p">&gt;(</span><span class="k">typeof</span><span class="p">(</span><span class="n">UserContext</span><span class="p">),</span> <span class="n">Lifetime</span><span class="p">.</span><span class="n">PerRequest</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></IUserContext></IUserContext></p>

<p>Depending on the container used however this comes with a limitation that the injected type must either:</p>

<ul>
  <li>be a concrete type (resolving concrete types automatically is supported eg. by <a href="http://stackoverflow.com/a/3267742/1103498">Unity</a> or the bundled <a href="https://github.com/grumpydev/TinyIoC">TinyIoC</a>)</li>
  <li>be registered up-front in the <a href="https://github.com/NancyFx/Nancy/wiki/Bootstrapping-nancy">Bootstrapper</a></li>
</ul>

<h2 id="providing-defaults-registrations-to-consumers">Providing defaults registrations to consumers</h2>

<p>Because Nancy provides a container-agnostic way for registering dependencies and will discover them at startup it is
trivially easy to bundle defaults within a reusable package. In addition to the above it is also possible to register
defaults, which will only be used if no consumer-defined type is found. <img class="emoji" title=":tada:" alt=":tada:" src="https://assets.github.com/images/icons/emoji/unicode/1f389.png" height="20" width="20" align="absmiddle" /></p>

<p><a href="https://github.com/wikibus/Argolis/blob/master/src/Lernaean.Hydra.Nancy/HydraRegistrations.cs">In Argolis</a> I have a 
<code>HydraRegistrations</code> class, which defines defaults. It is also possible to register multiple implementations of which can
be resolved as <code>IEnumerable&lt;&gt;</code>.</p>

<p>Here’s an excerpt showing default registration for the <code>ISupportedClassMetaProvider</code> and three defaults for
<code>IPropertyRangeMappingPolicy</code>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">HydraRegistrations</span> <span class="p">:</span> <span class="n">Nancy</span><span class="p">.</span><span class="n">Bootstrapper</span><span class="p">.</span><span class="n">Registrations</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Registrations</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">RegisterWithDefault</span><span class="p">&lt;</span><span class="n">ISupportedClassMetaProvider</span><span class="p">&gt;(</span><span class="k">typeof</span><span class="p">(</span><span class="n">DefaultSupportedClassMetaProvider</span><span class="p">));</span>
</span><span class='line'>        <span class="n">RegisterWithUserThenDefault</span><span class="p">&lt;</span><span class="n">IPropertyRangeMappingPolicy</span><span class="p">&gt;(</span><span class="k">new</span><span class="p">[]</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">typeof</span><span class="p">(</span><span class="n">XsdDatatypesMappingPolicy</span><span class="p">),</span>
</span><span class='line'>            <span class="k">typeof</span><span class="p">(</span><span class="n">XsdDatatypesNullablesMappingPolicy</span><span class="p">),</span>
</span><span class='line'>            <span class="k">typeof</span><span class="p">(</span><span class="n">SupportedClassRangeMappingPolicy</span><span class="p">),</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></IPropertyRangeMappingPolicy></ISupportedClassMetaProvider></p>

<p><code>RegisterWithDefault&lt;&gt;()</code> means that if not other implementation is found within user code, the type <code>DefaultSupportedClassMetaProvider</code>
will be used.</p>

<p><code>RegisterWithUserThenDefault&lt;&gt;()</code> means that the three given types will be used alongside any consumer’s implementations.</p>

<h2 id="switching-the-policy">Switching the policy</h2>

<p>So how does the user provide a different implementation of <code>ISupportedClassMetaProvider</code>? The easy way is simply creating
an implementation and it will be registered instead. Alternatively it is possible to create another registrations class
and register there.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ConsumerRegistrations</span> <span class="p">:</span> <span class="n">Nancy</span><span class="p">.</span><span class="n">Bootstrapper</span><span class="p">.</span><span class="n">Registrations</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Registrations</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Register</span><span class="p">&lt;</span><span class="n">ISupportedClassMetaProvider</span><span class="p">&gt;(</span><span class="k">typeof</span><span class="p">(</span><span class="n">MyBetterProvider</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></ISupportedClassMetaProvider></p>

<h2 id="super-duper-happy-path-at-its-best">Super-duper-happy-path at its best</h2>

<p>I can’t state enough how much I <img class="emoji" title=":sparkling_heart:" alt=":sparkling_heart:" src="https://assets.github.com/images/icons/emoji/unicode/1f496.png" height="20" width="20" align="absmiddle" /> this. Thanks to the <code>Registrations</code> class it is possible to create 
reusable Nancy libraries, which don’t require any unnecessary setup.</p>

<p>No boilerplate, no NuGet (<img class="emoji" title=":poop:" alt=":poop:" src="https://assets.github.com/images/icons/emoji/unicode/1f4a9.png" height="20" width="20" align="absmiddle" />) code generated from text templates, no DI-container dependency. It is just works out of
the box. <img class="emoji" title=":sparkles:" alt=":sparkles:" src="https://assets.github.com/images/icons/emoji/unicode/2728.png" height="20" width="20" align="absmiddle" /></p>

<p>Show me how your .NET web framework does it… <img class="emoji" title=":wink:" alt=":wink:" src="https://assets.github.com/images/icons/emoji/unicode/1f609.png" height="20" width="20" align="absmiddle" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Technology side of wikibus.org]]></title>
    <link href="http://t-code.pl/blog/2016/03/wikibus-real-technology-details/"/>
    <updated>2016-03-17T15:35:00+00:00</updated>
    <id>http://t-code.pl/blog/2016/03/wikibus-real-technology-details</id>
    <content type="html"><![CDATA[<p>I just noticed that I forgot to change the permalink of my <a href="/blog/2016/03/wikibus-technology-details/">last post</a>. I intended to write about tech, but ended up writing
about buses only. Too bad, but I’m not going to change that now. I this post I will write a little bit more about what
I’m actually implementing for wikibus.org</p>

<!--more-->

<p>Implementing all of it may be a daunting task. Because I want to build an entire website and API I’m aiming for the 
full-stack. On top of that I want to actually do something cool <img class="emoji" title=":sunglasses:" alt=":sunglasses:" src="https://assets.github.com/images/icons/emoji/unicode/1f60e.png" height="20" width="20" align="absmiddle" />, which for developers mean using a really
cutting-edge technology or publishing a reusable package.</p>

<p>And so my goals here are quite ambitious. I am</p>

<ul>
  <li>using RDF for as my data structures,</li>
  <li>want to implement the domain CQRS-style as event-sourced async models,</li>
  <li>use Nancy to serve data from the server because Web API sucks balls,</li>
  <li>hope to create a <strong><em>real</em></strong> REST API with the help of <a href="http://hydra-cg.com">Hydra</a>,</li>
  <li>intend to use Web Components and Polymer in the browser to consume my API.</li>
</ul>

<h2 id="divide-and-conquer">Divide and conquer</h2>

<p>Because there’s a lot of pieces to this bus-lovers’ puzzle, I created a <a href="http://github.com/wikibus">wikibus organization</a>, where I keep
separate repositories for each element. Except the dedicated front and back end I intend to keep the other libraries as
independent as possible so that they can be reused in other projects. I for one will be publishing my reusable code on
<a href="http://nuget.org">NuGet</a>.</p>

<p>I will be gradually mentioning all of the below in future blog posts.</p>

<h3 id="wikibus-backendback"><a href="http://github.com/wikibus/wikibus-backend">wikibus backend</a></h3>

<p>This is the main API and server side, where all the Nancy code and data-access will live. I will need a number of components 
to make it happen. Not all of it is available as open-source packages just yet, so I’m left with no choice but to implement
some <img class="emoji" title=":shit:" alt=":shit:" src="https://assets.github.com/images/icons/emoji/unicode/1f4a9.png" height="20" width="20" align="absmiddle" /> myself.</p>

<p>Currently I’ve just hit a 0.1 mark with an updated a deployable database of brochures. In a short future I will publish
a post where I share some details about how I convert my data from SQL Server to RDF and test the results.</p>

<p>The main interest of wikibus.org will of course be the <a href="/2016/03/wikibus-technology-details/">knowledge about public transport</a>. Because of the complexity 
I probably will use a form of CQRS with eventually consistent RDF models. This will hopefully buy me flexibility in adapting to
changes in how I want to process raw data. We’ll see.</p>

<h3 id="jsonldentitiesjsonldentities"><a href="http://github.com/wikibus/JsonLD.Entities">JsonLD.Entities</a></h3>

<p><img src="https://raw.githubusercontent.com/wikibus/JsonLD.Entities/master/assets/icon.png" alt="json-ld entities logo" /></p>

<p>First component I’ve built as a reusable library is a simple serializer, which can convert POCO object to <a href="http://json-ld.org">JSON-LD</a>
and vice versa. It is basically an extension of the immensely popular <a href="http://json.net">Newtonsoft.Json</a> package. I wanted
too keep JsonLD.Entities as simple as possible and so most of it works by convention.</p>

<p>There are some <a href="https://github.com/wikibus/JsonLD.Entities/tree/master/src/Documentation">examples</a> and this package is
the first wikibus library already available on <a href="https://www.nuget.org/packages/JsonLd.Entities/">nuget</a>.</p>

<h3 id="nancyrdfnancy-rdf"><a href="http://github.com/wikibus/nancy.rdf">Nancy.Rdf</a></h3>

<p><img src="https://raw.githubusercontent.com/wikibus/Nancy.Rdf/master/assets/icon_21532.png" alt="nancy.rdf icon" /></p>

<p>Second part that I find missing for a .NET REST API, which would serve RDF data are serializers of RDF media types. I love
Nancy and so I wrap it is my weapon of choice for building a RESTful web service. On top of Nancy I am building a set of
response processors, which will be able to serve POCO classes serialized to RDF formats. Unsurprisingly I’m using the
library I introduced above combined with <a href="http://dotnetrdf.org">dotNetRDF</a> so that I can return not only JSON-LD but also
most other RDF formats: RDF/XML, Turtle, n-triples and more.</p>

<p>Once the code stabilizes, first step will be to add some documentation. Then I may consider breaking concrete dependency
on dotNetRDF and offer a <a href="https://rdfsharp.codeplex.com/">RDFSharp</a> alternative package. Finally I shall add support for low-level RDF objects,
that is raw graphs, datasets and SPARQL results.</p>

<h3 id="argolisargolis"><a href="http://github.com/wikibus/Argolis">Argolis</a></h3>

<p><img src="https://raw.githubusercontent.com/HydraCG/hydra-cg.com/master/img/logo.png" width="100" title="hydra logo" ></p>

<p>The newest member of the wikibus.org crowd is called Argolis, which further extends Nancy.Rdf above to add support for
<a href="http://hydra-cg.com">Hydra</a>, which is a vocabulary for hypermedia-driven applications. It means that hydra is the means to describe
the API in a way where the client is actually driven by hypermedia</p>

<p>I named it after the <a href="https://en.wikipedia.org/wiki/Regions_of_ancient_Greece#Argolis">mythical</a> (and <a href="https://en.wikipedia.org/wiki/Argolis">modern</a>) part of Greece. I chose that name, because it
is where the mythical beast Hydra originates from.</p>

<p><img src="/uploads/2016/03/hydra.gif" alt="Hydra drawing by Andrew Jian" /></p>

<p>Hydra drawing by <a href="https://www.flickr.com/photos/andrew_jian/">Andrew Jian</a>.</p>

<p>Similarly as with Nancy.Rdf, this is very new stuff.The goal for both Argolis and Nancy.Rdf is to provide a 
<a href="https://github.com/NancyFx/Nancy/wiki/Introduction#the-super-duper-happy-path">supper-duper-happy-path</a> so that the usage is as simple as possible. I’m still ironing out some details and as soon 
as I’m happy with the API and features I will add some documentation and publish a NuGet package.</p>

<h3 id="wwwwikibusorgwwwwikibusorg"><a href="http://github.com/wikibus/www.wikibus.org">www.wikibus.org</a></h3>

<p>Lastly here’s the main front-end library. I’ve purchased a bootstrap template ages ago and started some work on that ages
ago but there is a lot I want to accomplish in this space too:</p>

<ul>
  <li>use Polymer (styling will be tricky with Shadow DOM)</li>
  <li>consume <a href="http://hydra-cg.com">Hydra</a> - I hope to use an existing library; maybe <a href="https://github.com/n-fuse/hyjax">hyjax</a></li>
  <li>end result: be really RESTful (thanks to <a href="http://hydra-cg.com">Hydra</a>)</li>
</ul>

]]></content>
  </entry>
  
</feed>
