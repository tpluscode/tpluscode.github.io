<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hypermedia | Tomasz Pluskiewicz]]></title>
  <link href="http://t-code.pl/blog/categories/hypermedia/atom.xml" rel="self"/>
  <link href="http://t-code.pl/"/>
  <updated>2021-03-28T12:28:09+00:00</updated>
  <id>http://t-code.pl/</id>
  <author>
    <name><![CDATA[Tomasz Pluskiewicz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hydra and SHACL - part 2 - IRI Templates]]></title>
    <link href="http://t-code.pl/blog/2020/12/hydra-shacl-templates/"/>
    <updated>2020-12-28T00:00:00+00:00</updated>
    <id>http://t-code.pl/blog/2020/12/hydra-shacl-templates</id>
    <content type="html"><![CDATA[<p>In the <a href="/blog/2020/12/hydra-shacl-interoperability">previous post</a> I presented the simplest functionality of loading remote form contents by having <a href="https://www.w3.org/TR/shacl/">SHACL</a> property shape reference a <a href="http://www.hydra-cg.com/spec/latest/core/">Hydra Core</a> collection.</p>

<p>In the second part I will extend that example to create a form with multiple connected dropdowns, where each one is only populated when other(s) have been selected, which is a common scenario seen in (web) applications.</p>

<!--more-->

<h2 id="tldr-can-i-see-it-working">TL;DR; can I see it working?</h2>

<p>The screenshot below links to Shaperone Playground which implements the ideas described in the subsequent paragraphs.</p>

<p>[<img src="/images/shaperone/hydra-search.png" alt="shaperone playground" />][playground]</p>

<h2 id="filtering-collections-with-hydra">Filtering collections with Hydra</h2>

<p>In addition to <code>hydra:collection</code>, the Hydra Core vocabulary comes with another general-purpose property <code>hydra:search</code>. Unlike most predicates which would link to another resource, identified by a concrete URI, its objects are instances of URI Templates, defined by <a href="https://tools.ietf.org/html/rfc6570">RFC6570</a>.</p>

<p>For example, let’s have a “State collection” resource which returns country’s first-level administrative division. It would come with a search template so that clients can construct filtered URIs:</p>

<rdf-snippet formats="text/turtle,application/n-quads" prefixes="schema,hydra">
<script type="application/ld+json">
{
  "@context": {
    "@vocab": "http://www.w3.org/ns/hydra/core#",
    "schema": "http://schema.org/",
    "property": { "@type": "@id" }
  },
  "@id": "/states",
  "@type": "Collection",
  "search": {
    "@type": "IriTemplate",
    "template": "/states?country={country}",
    "mapping": [{
      "variable": "country",
      "property": "schema:addressCountry",
      "required": true
    }]
  }
}
</script>
</rdf-snippet>

<p>The client must provide template values to a Hydra library which will return a URI fit for dereferencing. This is called <code>expansion</code> by the RFC6570. A Hydra client will take a graph node with values being attached to that node using the <code>hydra:property</code> as defined by the template and match those property/object pairs to the template variables.</p>

<p>Here’s an example of such a template variable model, where JSON-LD <code>@context</code> has been constructed from the <code>hydra:mapping</code>, although the JSON keys may be irrelevant for the expansion if the implementation only relies on the actual graph data.</p>

<rdf-snippet formats="text/turtle,application/n-quads" prefixes="schema,hydra">
<script type="application/ld+json">
{
  "@context": {
    "schema": "http://schema.org/",
    "country": "schema:addressCountry"
  },
  "country": { "@id": "http://www.wikidata.org/entity/Q27" }
}
</script>
</rdf-snippet>

<p>Combine this with the template above to get</p>

<blockquote>
  <p><code>/states?country=http%3A%2F%2Fwww.wikidata.org%2Fentity%2FQ27</code></p>
</blockquote>

<p>Read more about Hydra’s template <a href="http://www.hydra-cg.com/spec/latest/core/#templated-links">here</a></p>

<h2 id="connecting-form-fields">Connecting form fields</h2>

<p>The idea is simple:</p>

<ol>
  <li>A SHACL Shape describes a graph structure</li>
  <li>A form can be generated for agents (usu. humans) to create an instance of such a graph</li>
  <li>Use the created graph to expand a template</li>
</ol>

<p>Now, a form in such a scenario could simply be used to filter a collection for display, but I propose to short-circuit it back into the form itself so that the filtered collection, when dereferenced, provides values for other fields.</p>

<rdf-snippet formats="application/ld+json,application/n-quads" prefixes="schema,hydra,sh,dash">
<script type="text/turtle">
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix schema: <http://schema.org/> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix hydra: <http://www.w3.org/ns/hydra/core#> .

@prefix ex: <http://example.com/> .

schema:Person
  a rdfs:Class, sh:NodeShape ;
  rdfs:label "Register" ;
  sh:property ex:CountryProperty , ex:StateProperty .

ex:CountryProperty
  sh:name "Country" ;
  dash:editor dash:InstancesSelectEditor ;
  sh:path schema:addressCountry ;
  hydra:collection </countries> .

ex:StateProperty
  sh:name "State" ;
  sh:path ex:state ;
  dash:editor dash:InstancesSelectEditor ;
  hydra:search [
    hydra:template "/states?country={country}" ;
    hydra:mapping [
      hydra:property schema:addressCountry ;
      hydra:variable "country" ;
      hydra:required true ;
    ] ;
  ] .
</script>
</rdf-snippet>

<p>The <code>Person</code> shape above has two properties. The first will generate a dropdown with a selection of countries as described in <a href="/blog/2020/12/hydra-shacl-interoperability">the first Hydra+SHACL post</a>. The second, while it’s also going to render a dropdown, will not be populated until a country is selected (<code>hydra:required true</code>).</p>

<p>The glue here is matching property shared between <code>sh:path</code> of the upstream field and <code>hydra:property</code> of the downstream’s search template. In other words, when the form’s graph node receives the value for the <code>schema:addressCountry</code> predicate, the “states” will be loaded.</p>

<h2 id="less-apis-more-web-standards">Less APIs, more Web Standards!</h2>

<p>Again this time, the [playground][playground] example does not “talk” to an actual API but instead runs SPARQL queries encoded into query string parameters of Wikidata’s query endpoint. The trick is to replace a URI of the variable with a URI Template placeholder. <strong>Just gotta make sure that the braces are not percent-encoded</strong>.</p>

<p>The query to load states is simple:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sparql'><span class='line'><span class="k">PREFIX</span><span class="w"> </span><span class="nn">wd</span><span class="p">:</span><span class="w"> </span><span class="nl">&lt;a href=&quot;http://www.wikidata.org/entity/&quot;&gt;</span><span class="err">http</span><span class="p">:</span><span class="o">//</span><span class="err">www</span><span class="p">.</span><span class="err">wikid</span><span class="k">a</span><span class="err">t</span><span class="k">a</span><span class="p">.</span><span class="err">org</span><span class="o">/</span><span class="err">entity</span><span class="o">/</span><span class="nl">&lt;/a&gt;</span><span class="w"></span>
</span><span class='line'><span class="k">PREFIX</span><span class="w"> </span><span class="nn">wdt</span><span class="p">:</span><span class="w"> </span><span class="nl">&lt;a href=&quot;http://www.wikidata.org/prop/direct/&quot;&gt;</span><span class="err">http</span><span class="p">:</span><span class="o">//</span><span class="err">www</span><span class="p">.</span><span class="err">wikid</span><span class="k">a</span><span class="err">t</span><span class="k">a</span><span class="p">.</span><span class="err">org</span><span class="o">/</span><span class="err">prop</span><span class="o">/</span><span class="err">direct</span><span class="o">/</span><span class="nl">&lt;/a&gt;</span><span class="w"></span>
</span><span class='line'><span class="k">prefix</span><span class="w"> </span><span class="nn">hydra</span><span class="p">:</span><span class="w"> </span><span class="nl">&lt;a href=&quot;http://www.w3.org/ns/hydra/core#&quot;&gt;</span><span class="err">http</span><span class="p">:</span><span class="o">//</span><span class="err">www</span><span class="p">.</span><span class="err">w</span><span class="mi">3</span><span class="p">.</span><span class="err">org</span><span class="o">/</span><span class="err">ns</span><span class="o">/</span><span class="err">hydr</span><span class="k">a</span><span class="o">/</span><span class="err">core</span><span class="c">#&lt;/a&gt;&lt;/p&gt;</span><span class="w"></span>
</span><span class='line'>
</span><span class='line'><span class="nl">&lt;p&gt;</span><span class="k">CONSTRUCT</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class='line'><span class="w">  </span><span class="nv">?col</span><span class="w"> </span><span class="k">a</span><span class="w"> </span><span class="nn">hydra</span><span class="p">:</span><span class="nt">Collection</span><span class="w"> </span><span class="p">.</span><span class="w"></span>
</span><span class='line'><span class="w">  </span><span class="nv">?col</span><span class="w"> </span><span class="nn">hydra</span><span class="p">:</span><span class="nt">member</span><span class="w"> </span><span class="nv">?division</span><span class="w"> </span><span class="p">.</span><span class="w"></span>
</span><span class='line'><span class="w">  </span><span class="nv">?division</span><span class="w"> </span><span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span><span class="w"> </span><span class="nv">?label</span><span class="w"> </span><span class="p">.</span><span class="w"></span>
</span><span class='line'><span class="p">}</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class='line'><span class="w">  </span><span class="k">BIND</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="nl">&lt;urn:contry:collection&gt;</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nv">?col</span><span class="w"> </span><span class="p">)</span><span class="nl">&lt;/urn:contry:collection&gt;&lt;/p&gt;</span><span class="w"></span>
</span><span class='line'>
</span><span class='line'><span class="nl">&lt;p&gt;</span><span class="err">&amp;lt</span><span class="p">;{</span><span class="err">COUNTRY</span><span class="p">}</span><span class="err">&amp;gt</span><span class="p">;</span><span class="w"> </span><span class="nn">wdt</span><span class="p">:</span><span class="nt">P150</span><span class="w"> </span><span class="nv">?division</span><span class="w"> </span><span class="p">.</span><span class="w"></span>
</span><span class='line'><span class="w">  </span><span class="nv">?division</span><span class="w"> </span><span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span><span class="w"> </span><span class="nv">?label</span><span class="w"> </span><span class="p">.</span><span class="w"></span>
</span><span class='line'><span class="w">  </span><span class="k">filter</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="nf">lang</span><span class="p">(</span><span class="nv">?label</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="err">‘en’</span><span class="p">,</span><span class="w"> </span><span class="err">‘de’</span><span class="p">,</span><span class="w"> </span><span class="err">‘fr’</span><span class="p">,</span><span class="w"> </span><span class="err">‘pl’</span><span class="p">,</span><span class="w"> </span><span class="err">‘es’</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"></span>
</span><span class='line'><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Loading cities is slightly more complicated, accounting for deeper graphs where a state is the root and also various types of cities recognised by Wikidata.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sparql'><span class='line'><span class="k">PREFIX</span><span class="w"> </span><span class="nn">wd</span><span class="p">:</span><span class="w"> </span><span class="nl">&lt;a href=&quot;http://www.wikidata.org/entity/&quot;&gt;</span><span class="err">http</span><span class="p">:</span><span class="o">//</span><span class="err">www</span><span class="p">.</span><span class="err">wikid</span><span class="k">a</span><span class="err">t</span><span class="k">a</span><span class="p">.</span><span class="err">org</span><span class="o">/</span><span class="err">entity</span><span class="o">/</span><span class="nl">&lt;/a&gt;</span><span class="w"></span>
</span><span class='line'><span class="k">PREFIX</span><span class="w"> </span><span class="nn">wdt</span><span class="p">:</span><span class="w"> </span><span class="nl">&lt;a href=&quot;http://www.wikidata.org/prop/direct/&quot;&gt;</span><span class="err">http</span><span class="p">:</span><span class="o">//</span><span class="err">www</span><span class="p">.</span><span class="err">wikid</span><span class="k">a</span><span class="err">t</span><span class="k">a</span><span class="p">.</span><span class="err">org</span><span class="o">/</span><span class="err">prop</span><span class="o">/</span><span class="err">direct</span><span class="o">/</span><span class="nl">&lt;/a&gt;</span><span class="w"></span>
</span><span class='line'><span class="k">prefix</span><span class="w"> </span><span class="nn">hydra</span><span class="p">:</span><span class="w"> </span><span class="nl">&lt;a href=&quot;http://www.w3.org/ns/hydra/core#&quot;&gt;</span><span class="err">http</span><span class="p">:</span><span class="o">//</span><span class="err">www</span><span class="p">.</span><span class="err">w</span><span class="mi">3</span><span class="p">.</span><span class="err">org</span><span class="o">/</span><span class="err">ns</span><span class="o">/</span><span class="err">hydr</span><span class="k">a</span><span class="o">/</span><span class="err">core</span><span class="c">#&lt;/a&gt;&lt;/p&gt;</span><span class="w"></span>
</span><span class='line'>
</span><span class='line'><span class="nl">&lt;p&gt;</span><span class="k">CONSTRUCT</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class='line'><span class="w">  </span><span class="nv">?col</span><span class="w"> </span><span class="k">a</span><span class="w"> </span><span class="nn">hydra</span><span class="p">:</span><span class="nt">Collection</span><span class="w"> </span><span class="p">.</span><span class="w"></span>
</span><span class='line'><span class="w">  </span><span class="nv">?col</span><span class="w"> </span><span class="nn">hydra</span><span class="p">:</span><span class="nt">member</span><span class="w"> </span><span class="nv">?city</span><span class="w"> </span><span class="p">.</span><span class="w"></span>
</span><span class='line'><span class="w">  </span><span class="nv">?city</span><span class="w"> </span><span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span><span class="w"> </span><span class="nv">?label</span><span class="w"> </span><span class="p">.</span><span class="w"></span>
</span><span class='line'><span class="p">}</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class='line'><span class="w">  </span><span class="k">BIND</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="nl">&lt;urn:contry:collection&gt;</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nv">?col</span><span class="w"> </span><span class="p">)</span><span class="nl">&lt;/urn:contry:collection&gt;&lt;/p&gt;</span><span class="w"></span>
</span><span class='line'>
</span><span class='line'><span class="nl">&lt;STATE&gt;</span><span class="w"> </span><span class="nn">wdt</span><span class="p">:</span><span class="nt">P150</span><span class="o">*</span><span class="w"> </span><span class="nv">?city</span><span class="w"> </span><span class="p">.</span><span class="w"></span>
</span><span class='line'><span class="w">  </span><span class="nv">?city</span><span class="w"> </span><span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span><span class="w"> </span><span class="nv">?label</span><span class="w"> </span><span class="p">.</span><span class="w"></span>
</span><span class='line'><span class="w">  </span><span class="nv">?city</span><span class="w"> </span><span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span><span class="w"> </span><span class="nv">?cityType</span><span class="w"> </span><span class="p">.</span><span class="w"></span>
</span><span class='line'><span class="w">  </span><span class="nv">?cityType</span><span class="w"> </span><span class="nn">wdt</span><span class="p">:</span><span class="nt">P279</span><span class="w"> </span><span class="nn">wd</span><span class="p">:</span><span class="nt">Q515</span><span class="w"> </span><span class="p">.</span><span class="w"></span>
</span><span class='line'>
</span><span class='line'><span class="w">  </span><span class="k">filter</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="nf">lang</span><span class="p">(</span><span class="nv">?label</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="s">&#39;en&#39;</span><span class="p">,</span><span class="w"> </span><span class="s">&#39;de&#39;</span><span class="p">,</span><span class="w"> </span><span class="s">&#39;fr&#39;</span><span class="p">,</span><span class="w"> </span><span class="s">&#39;pl&#39;</span><span class="p">,</span><span class="w"> </span><span class="s">&#39;es&#39;</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"></span>
</span><span class='line'><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure>

Tried as I might, the cities query does not work for every country. United States, Germany and Poland are fine. On the other hand, for Colombia and Australia it finds no cities at all. Queries for Australian cities are also surprisingly slow...

It is not important for the example, but I would be curious to learn from a Wikidata expert how it can be improved.

<script src="/components/rdf-snippet.js"></script>

[playground]: https://forms.hypermedia.app/playground?resource=%7B%0A++%22%40context%22%3A+%7B%0A++++%22rdf%22%3A+%22http%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23%22%2C%0A++++%22rdfs%22%3A+%22http%3A%2F%2Fwww.w3.org%2F2000%2F01%2Frdf-schema%23%22%2C%0A++++%22xsd%22%3A+%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23%22%2C%0A++++%22schema%22%3A+%22http%3A%2F%2Fschema.org%2F%22%2C%0A++++%22foaf%22%3A+%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%2C%0A++++%22vcard%22%3A+%22http%3A%2F%2Fwww.w3.org%2F2006%2Fvcard%2Fns%23%22%0A++%7D%2C%0A++%22%40id%22%3A+%22http%3A%2F%2Fexample.com%2Fjohn-doe%22%2C%0A++%22%40type%22%3A+%22schema%3APerson%22%2C%0A++%22schema%3AaddressCountry%22%3A+%7B%0A++++%22%40id%22%3A+%22http%3A%2F%2Fwww.wikidata.org%2Fentity%2FQ39%22%0A++%7D%0A%7D&amp;selectedResource=http%3A%2F%2Fexample.com%2Fjohn-doe&amp;shapes=%40prefix+sh%3A+%3Chttp%3A%2F%2Fwww.w3.org%2Fns%2Fshacl%23%3E+.%0A%40prefix+schema%3A+%3Chttp%3A%2F%2Fschema.org%2F%3E+.%0A%40prefix+rdfs%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F01%2Frdf-schema%23%3E+.%0A%40prefix+xsd%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23%3E+.%0A%40prefix+dash%3A+%3Chttp%3A%2F%2Fdatashapes.org%2Fdash%23%3E+.%0A%40prefix+hydra%3A+%3Chttp%3A%2F%2Fwww.w3.org%2Fns%2Fhydra%2Fcore%23%3E+.%0A%40prefix+wdt%3A+%3Chttp%3A%2F%2Fwww.wikidata.org%2Fprop%2Fdirect%2F%3E+.%0A%40prefix+wd%3A+%3Chttp%3A%2F%2Fwww.wikidata.org%2Fentity%2F%3E+.%0A%0A%40prefix+ex%3A+%3Chttp%3A%2F%2Fexample.com%2F%3E+.%0A%0Aschema%3APerson%0A++a+rdfs%3AClass%2C+sh%3ANodeShape+%3B%0A++rdfs%3Alabel+%22Register%22+%3B%0A++sh%3Aproperty+ex%3ANameProperty+%2C+%0A%09%09++++++ex%3ACountryProperty+%2C+%0A%09%09%09++ex%3AStateProperty+%2C%0A++++++++++++++ex%3ASubStateProperty+%3B%0A.%0A%0Aex%3ANameProperty%0A++sh%3Apath+schema%3Aname+%3B%0A++sh%3Aname+%22Name%22+%3B%0A++sh%3Adatatype+xsd%3Astring+%3B%0A++dash%3AsingleLine+true+%3B%0A++sh%3AmaxCount+1+%3B%0A++sh%3AminCount+1+%3B%0A++sh%3Aorder+10+%3B%0A.%0A%0Aex%3ACountryProperty%0A++sh%3Aname+%22Country%22+%3B%0A++sh%3Aclass+wd%3AQ6256+%3B%0A++dash%3Aeditor+dash%3AInstancesSelectEditor+%3B%0A++sh%3Apath+schema%3AaddressCountry+%3B%0A++sh%3AminCount+1+%3B%0A++sh%3AmaxCount+1+%3B%0A++hydra%3Acollection+%3Chttps%3A%2F%2Fquery.wikidata.org%2Fsparql%3Fquery%3Dprefix%2520hydra%253A%2520%253Chttp%253A%252F%252Fwww.w3.org%252Fns%252Fhydra%252Fcore%2523%253E%250A%250ACONSTRUCT%2520%257B%250A%2520%2520%253Fcol%2520a%2520hydra%253ACollection%2520.%250A%2520%2520%253Fcol%2520hydra%253Amember%2520%253Fcountry%2520.%250A%2520%2520%253Fcountry%2520rdfs%253Alabel%2520%253Flabel%2520.%250A%257D%2520WHERE%2520%257B%250A%2520%2520BIND%2520%2528%2520%253Curn%253Acontry%253Acollection%253E%2520as%2520%253Fcol%2520%2529%250A%250A%2520%2520%253Fcountry%2520wdt%253AP31%2520wd%253AQ6256%2520%253B%2520rdfs%253Alabel%2520%253Flabel%2520.%250A%250A%2520%2520filter%2520%2528%2520lang%2528%253Flabel%2529%2520IN%2520%2528%2520%2527en%2527%252C%2520%2527de%2527%252C%2520%2527fr%2527%252C%2520%2527pl%2527%252C%2520%2527es%2527%2520%2529%2520%2529%250A%257D%3E+%3B%0A++sh%3Aorder+20+%3B%0A.%0A%0A%0Aex%3AStateProperty%0A++sh%3Aname+%22State%22+%3B%0A++sh%3Apath+schema%3AaddressRegion+%3B%0A++sh%3AminCount+1+%3B%0A++sh%3AmaxCount+1+%3B%0A++dash%3Aeditor+dash%3AInstancesSelectEditor+%3B%0A++hydra%3Asearch+%5B%0A++++hydra%3Atemplate+%22https%3A%2F%2Fquery.wikidata.org%2Fsparql%3Fquery%3DPREFIX%2520wd%253A%2520%253Chttp%253A%252F%252Fwww.wikidata.org%252Fentity%252F%253E%250APREFIX%2520wdt%253A%2520%253Chttp%253A%252F%252Fwww.wikidata.org%252Fprop%252Fdirect%252F%253E%250Aprefix%2520hydra%253A%2520%253Chttp%253A%252F%252Fwww.w3.org%252Fns%252Fhydra%252Fcore%2523%253E%250A%250ACONSTRUCT%2520%257B%250A%2520%2520%253Fcol%2520a%2520hydra%253ACollection%2520.%250A%2520%2520%253Fcol%2520hydra%253Amember%2520%253Fdivision%2520.%250A%2520%2520%253Fdivision%2520rdfs%253Alabel%2520%253Flabel%2520.%250A%257D%2520WHERE%2520%257B%250A%2520%2520BIND%2520%2528%2520%253Curn%253Acontry%253Acollection%253E%2520as%2520%253Fcol%2520%2529%250A%2520%2520%250A%2520%2520%253C%7BCOUNTRY%7D%253E%2520wdt%253AP150%2520%253Fdivision%2520.%250A%2520%2520%253Fdivision%2520rdfs%253Alabel%2520%253Flabel%2520.%250A%2520%2520filter%2520%2528%2520lang%2528%253Flabel%2529%2520IN%2520%2528%2520%2527en%2527%252C%2520%2527de%2527%252C%2520%2527fr%2527%252C%2520%2527pl%2527%252C%2520%2527es%2527%2520%2529%2520%2529%250A%257D%22+%3B%0A++++hydra%3Amapping+%5B%0A++++++hydra%3Aproperty+schema%3AaddressCountry+%3B%0A++++++hydra%3Avariable+%22COUNTRY%22+%3B%0A++++++hydra%3Arequired+true+%3B%0A++++%5D+%3B%0A++%5D+%3B%0A++sh%3Aorder+30+%3B%0A.%0A%0A%0Aex%3ASubStateProperty%0A++sh%3Aname+%22City%22+%3B%0A++sh%3Apath+schema%3AaddressLocality+%3B%0A++sh%3AminCount+1+%3B%0A++sh%3AmaxCount+1+%3B%0A++dash%3Aeditor+dash%3AInstancesSelectEditor+%3B%0A++hydra%3Asearch+%5B%0A++++hydra%3Atemplate+%22https%3A%2F%2Fquery.wikidata.org%2Fsparql%3Fquery%3DPREFIX%2520wd%253A%2520%253Chttp%253A%252F%252Fwww.wikidata.org%252Fentity%252F%253E%250APREFIX%2520wdt%253A%2520%253Chttp%253A%252F%252Fwww.wikidata.org%252Fprop%252Fdirect%252F%253E%250Aprefix%2520hydra%253A%2520%253Chttp%253A%252F%252Fwww.w3.org%252Fns%252Fhydra%252Fcore%2523%253E%250A%250ACONSTRUCT%2520%257B%250A%2520%2520%253Fcol%2520a%2520hydra%253ACollection%2520.%250A%2520%2520%253Fcol%2520hydra%253Amember%2520%253Fcity%2520.%250A%2520%2520%253Fcity%2520rdfs%253Alabel%2520%253Flabel%2520.%250A%257D%2520WHERE%2520%257B%250A%2520%2520BIND%2520%2528%2520%253Curn%253Acontry%253Acollection%253E%2520as%2520%253Fcol%2520%2529%250A%2520%250A%2520%2520%257B%250A%2520%2520%2520%2520SELECT%2520%253Fcity%2520%253Flabel%2520WHERE%2520%257B%250A%2520%2520%2520%2520%2520%2520%253C%7BSTATE%7D%253E%2520wdt%253AP150%252B%2520%253Fcity%2520.%250A%2520%2520%2520%2520%2520%2520%253Fcity%2520rdfs%253Alabel%2520%253Flabel%2520.%250A%2520%2520%2520%2520%2520%2520%253Fcity%2520wdt%253AP31%2520%253FcityType%2520.%250A%2520%2520%2520%2520%2520%2520%253FcityType%2520wdt%253AP279%2520wd%253AQ515%2520.%250A%2520%2520%2520%2520%257D%250A%2520%2520%257D%250A%2520%2520UNION%250A%2520%2520%257B%250A%2520%2520%2520%2520SELECT%2520%253Fcity%2520%253Flabel%2520WHERE%2520%257B%2520%2520%2520%2520%250A%2520%2520%2520%2520%2520%2520%253C%7BSTATE%7D%253E%2520wdt%253AP150%252B%2520%253Fcity%2520.%250A%2520%2520%2520%2520%2520%2520%253Fcity%2520rdfs%253Alabel%2520%253Flabel%2520.%250A%2520%2520%2520%2520%2520%2520%253Fcity%2520wdt%253AP31%2520wd%253AQ515%2520.%250A%2520%2520%2520%2520%257D%250A%2520%2520%257D%250A%2520%2520filter%2520%2528%2520lang%2528%253Flabel%2529%2520IN%2520%2528%2520%2527en%2527%252C%2520%2527de%2527%252C%2520%2527fr%2527%252C%2520%2527pl%2527%252C%2520%2527es%2527%2520%2529%2520%2529%250A%257D%22+%3B%0A++++hydra%3Amapping+%5B%0A++++++hydra%3Aproperty+schema%3AaddressRegion+%3B%0A++++++hydra%3Avariable+%22STATE%22+%3B%0A++++++hydra%3Arequired+true+%3B%0A++++%5D+%3B%0A++%5D+%3B%0A++sh%3Aorder+40+%3B%0A.
</STATE>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hydra and SHACL - a perfect couple - part 1]]></title>
    <link href="http://t-code.pl/blog/2020/12/hydra-shacl-interoperability/"/>
    <updated>2020-12-20T00:00:00+00:00</updated>
    <id>http://t-code.pl/blog/2020/12/hydra-shacl-interoperability</id>
    <content type="html"><![CDATA[<p><a href="http://www.hydra-cg.com/spec/latest/core/">Hydra Core</a> is a community-driven specification for describing hypermedia APIs in a machine readable form so that client applications can discover the resources at runtime. On its own, however, it is not expressible enough to describe any arbitrary resource representation.
<a href="https://www.w3.org/TR/shacl/">SHACL</a>, or Shapes Constraint Language, on the other hand is a beautifully extensible schema-like language which offers great power and flexibility in describing graph data structures.
Combined, they provide a complete solution for building hypermedia applications driven by RDF.</p>

<!--more-->

<h2 id="tldr-i-want-some-action">TL;DR; I want some action!</h2>

<p>Click the image to open Shaperone Playground, which demonstrates a working example of a form generated from a SHACL shape which dynamically loads Wikidata resources using SPARQL.</p>

<p>At the bottom of this post you will see how to configure <a href="https://github.com/hypermedia-app/shaperone">shaperone</a> this way.</p>

<p><a href="https://forms.hypermedia.app/playground?resource=%7B%0A++%22%40context%22%3A+%7B%0A++++%22rdf%22%3A+%22http%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23%22%2C%0A++++%22rdfs%22%3A+%22http%3A%2F%2Fwww.w3.org%2F2000%2F01%2Frdf-schema%23%22%2C%0A++++%22xsd%22%3A+%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23%22%2C%0A++++%22schema%22%3A+%22http%3A%2F%2Fschema.org%2F%22%2C%0A++++%22foaf%22%3A+%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%2C%0A++++%22vcard%22%3A+%22http%3A%2F%2Fwww.w3.org%2F2006%2Fvcard%2Fns%23%22%2C%0A++++%22dcat%22%3A+%22http%3A%2F%2Fwww.w3.org%2Fns%2Fdcat%23%22%0A++%7D%2C%0A++%22%40id%22%3A+%22http%3A%2F%2Fexample.com%2Fjohn-doe%22%2C%0A++%22%40type%22%3A+%22schema%3APerson%22%2C%0A++%22schema%3Aname%22%3A+%22John+Doe%22%0A%7D&amp;selectedResource=http%3A%2F%2Fexample.com%2Fjohn-doe&amp;shapes=%40prefix+sh%3A+%3Chttp%3A%2F%2Fwww.w3.org%2Fns%2Fshacl%23%3E+.%0A%40prefix+schema%3A+%3Chttp%3A%2F%2Fschema.org%2F%3E+.%0A%40prefix+rdfs%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F01%2Frdf-schema%23%3E+.%0A%40prefix+xsd%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23%3E+.%0A%40prefix+dash%3A+%3Chttp%3A%2F%2Fdatashapes.org%2Fdash%23%3E+.%0A%40prefix+hydra%3A+%3Chttp%3A%2F%2Fwww.w3.org%2Fns%2Fhydra%2Fcore%23%3E+.%0A%40prefix+wdt%3A+%3Chttp%3A%2F%2Fwww.wikidata.org%2Fprop%2Fdirect%2F%3E+.%0A%40prefix+wd%3A+%3Chttp%3A%2F%2Fwww.wikidata.org%2Fentity%2F%3E+.%0A%0A%40prefix+ex%3A+%3Chttp%3A%2F%2Fexample.com%2F%3E+.%0A%0Aschema%3APerson%0A++a+rdfs%3AClass%2C+sh%3ANodeShape+%3B%0A++rdfs%3Alabel+%22Register%22+%3B%0A++sh%3Aproperty+ex%3ANameProperty+%2C+ex%3ACountryProperty+%3B%0A.%0A%0Aex%3ANameProperty%0A++sh%3Apath+schema%3Aname+%3B%0A++sh%3Aname+%22Name%22+%3B%0A++sh%3Adatatype+xsd%3Astring+%3B%0A++dash%3AsingleLine+true+%3B%0A++sh%3AmaxCount+1+%3B%0A++sh%3AminCount+1+%3B%0A++sh%3Aorder+10+%3B%0A.%0A%0Aex%3ACountryProperty%0A++a+sh%3APropertyShape+%3B%0A++sh%3Aname+%22Country%22+%3B%0A++sh%3Aclass+wd%3AQ6256+%3B%0A++dash%3Aeditor+dash%3AInstancesSelectEditor+%3B%0A++sh%3Apath+wdt%3AP27+%3B%0A++sh%3AminCount+1+%3B%0A++sh%3AmaxCount+1+%3B%0A++hydra%3Acollection+%3Chttps%3A%2F%2Fquery.wikidata.org%2Fsparql%3Fquery%3Dprefix%2520hydra%253A%2520%253Chttp%253A%252F%252Fwww.w3.org%252Fns%252Fhydra%252Fcore%2523%253E%250A%250ACONSTRUCT%2520%257B%250A%2520%2520%253Fcol%2520a%2520hydra%253ACollection%2520.%250A%2520%2520%253Fcol%2520hydra%253Amember%2520%253Fcountry%2520.%250A%2520%2520%253Fcountry%2520rdfs%253Alabel%2520%253Flabel%2520.%250A%257D%2520WHERE%2520%257B%250A%2520%2520BIND%2520%2528%2520%253Curn%253Acontry%253Acollection%253E%2520as%2520%253Fcol%2520%2529%250A%250A%2520%2520%253Fcountry%2520wdt%253AP31%2520wd%253AQ6256%2520%253B%2520rdfs%253Alabel%2520%253Flabel%2520.%250A%250A%2520%2520filter%2520%2528%2520lang%2528%253Flabel%2529%2520IN%2520%2528%2520%2527en%2527%252C%2520%2527de%2527%252C%2520%2527fr%2527%252C%2520%2527pl%2527%252C%2520%2527es%2527%2520%2529%2520%2529%250A%257D%3E+%3B%0A++sh%3Aorder+20+%3B%0A.%0A&amp;disableEditorChoice=true&amp;components=vaadin"><img src="/images/shaperone/hydra-collection.png" alt="shaperone playground" /></a></p>

<h2 id="hydra-http-request-descriptions">Hydra HTTP request descriptions</h2>

<p>The Hydra vocabulary defines a term <code>hydra:Operation</code> which represents a HTTP request which a server advertises as being supported by specific resources, either by a specific instance or entire class of resources.</p>

<p>For the sake of this blog post, let’s consider a hypothetical API which describes a registration request:</p>

<rdf-snippet formats="application/ld+json,application/n-quads" prefixes="schema,hydra">
   <script type="text/turtle">
base <http://example.app/api#>
prefix schema: <http://schema.org/>
prefix hydra:  <http://www.w3.org/ns/hydra/core#>
prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#>

<UsersCollection>
  a hydra:Class ;
  rdfs:subClassOf hydra:Collection ;
  hydra:supportedOperation <RegisterUser> .

<RegisterUser>
  a hydra:Operation , schema:CreateAction ;
  hydra:method "POST" ;
  hydra:expects <User> ;
.

<User> a hydra:Class .
   </script>
</rdf-snippet>

<p>The above snippet, excerpt from the API’s <a href="http://www.hydra-cg.com/spec/latest/core/#documenting-a-web-api">Documentation resource</a>, declares that the clients will come across a collection of users (<code>rdf:type &lt;UserCollection&gt;</code>) against which a POST request will be possible to create a new resource. That operation will require a representation of the <code>&lt;User&gt;</code> class.</p>

<p>While Hydra Core vocabulary does have a basic set of terms which can describe the user class, it may not be enough to cater for rich client-server interactions as well as a UI building block. Neither will be RDFS, and OWL, although quite powerful, is a little complex and seriously lacks tooling support and widespread recognition.</p>

<p>Enter, SHACL.</p>

<h2 id="using-shacl-to-describe-api-payloads">Using SHACL to describe API payloads</h2>

<p>SHACL is another RDF vocabulary, which describes data graphs by constraining properties and values of precisely targeted nodes in an RDF graph. It could be used to complement the API Documentation graph above by providing the required shape of instances of the <code>&lt;User&gt;</code> class. This is easiest done by turning it into an <a href="https://www.w3.org/TR/shacl/#implicit-targetClass">implicitly targeted</a> <a href="https://www.w3.org/TR/shacl/#node-shapes"><code>sh:NodeShape</code></a>.</p>

<p>In this example let’s require users to provide exactly one name (using <code>schema:name</code>) and exactly one country of citizenship (using said Wikidata property <a href="https://www.wikidata.org/wiki/Property:P27">P27</a>)</p>

<rdf-snippet formats="application/ld+json,application/n-quads" prefixes="schema,hydra,sh,dash">
   <script type="text/turtle">
prefix hydra:  <http://www.w3.org/ns/hydra/core#>
prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#>
prefix sh:     <http://www.w3.org/ns/shacl#>
prefix schema: <http://schema.org/>
prefix dash:   <http://datashapes.org/dash#>
prefix wdt:    <http://www.wikidata.org/prop/direct/>
prefix wd:     <http://www.wikidata.org/entity/>
prefix xsd:    <http://www.w3.org/2001/XMLSchema#>

<User>
  a hydra:Class , rdfs:Class , sh:NodeShape ;
  sh:property [
    a sh:PropertyShape ;
    sh:path schema:name ;
    sh:name "Name" ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:datatype xsd:string ;
    sh:minLength 3 ;
    sh:order 10 ;
    dash:singleLine true ;
  ] , [
    a sh:PropertyShape ;
    sh:name "Country" ;
    sh:class wd:Q6256 ;
    sh:path wdt:P27 ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:order 20 ;
    dash:editor dash:InstancesSelectEditor ;
  ] ;
.
   </script>
</rdf-snippet>

<p>Hopefully this is quite self-explanatory so far.</p>

<ol>
  <li>The objects of <code>sh:property</code> require that any instance of <code>&lt;User&gt;</code> have exactly one of each property, declared using <code>sh:path</code>. That is achieved using <code>sh:minCount</code> and <code>sh:maxCount</code></li>
  <li>Name must be at least 3 characters long string</li>
  <li>Country must be an instance of Wikidata Country class <code>wd:Q6256</code></li>
  <li>Exactly one country is allowed</li>
  <li><code>sh:order</code> is a UI hint for organising inputs in a form</li>
  <li><code>dash:singleLine</code> is a form builder hint which ensures that the text field does not allow line breaks (ie. no <code>&lt;textarea&gt;</code>)</li>
  <li><code>dash:editor</code> instructs the form builder to create an input component with a selection of instances of the desired RDF type</li>
</ol>

<p>SHACL is quite wonderful in that shapes are useful for many purposes. Check the <a href="https://www.w3.org/TR/shacl-ucr/">SHACL Use Cases and Requirements</a> note for a host of examples. In the presented scenario, a rich client can use to dynamically produce a form to have users input the data, and the server will run validations to check that requests payloads satisfy the SHACL constraints.</p>

<p>There is one piece missing however: <strong>where do the Country instances come from?</strong> 🤨</p>

<h2 id="circling-back-to-hydra">Circling back to Hydra</h2>

<p>Out of the box, a SHACL processor would assume that any instances would be part the <a href="https://www.w3.org/TR/shacl/#data-graph">Data Graph</a>. While this works for validation inside of TopBraid it is not feasible to build a browser application that way. For example, at the time of writing there are 171 instances of Country in Wikidata. Combined with a multitude of labels in various languages that is total of over 40 thousand triples. It’s hardly a good idea to push that proactively to the client up front.</p>

<p>Instead, I propose to connect the Shape back with the API using Hydra Core term <code>hydra:collection</code>. It is defined modestly:</p>

<blockquote>
  <p>Collections somehow related to this resource.</p>
</blockquote>

<p>It also does not have and <code>rdfs:range</code> or <code>rdfs:domain</code> making it a good candidate for linking a property shape directly with its data source:</p>

<p>```diff
prefix hydra: <a href="http://www.w3.org/ns/hydra/core#">http://www.w3.org/ns/hydra/core#</a>
prefix sh: <a href="http://www.w3.org/ns/shacl#">http://www.w3.org/ns/shacl#</a>
prefix wdt: <a href="http://www.wikidata.org/prop/direct/">http://www.wikidata.org/prop/direct/</a> 
prefix wd: <a href="http://www.wikidata.org/entity/">http://www.wikidata.org/entity/</a></p>

<User> 
  sh:property [
    a sh:PropertyShape ;
    sh:class wd:Q6256 ;
    sh:path wdt:P27 ;
+   hydra:collection &lt;https://example.app/countries&gt; ;
  ] ;
.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>By adding this property a UI component can load the countries by dereferencing a `hydra:Collection` whose representation would look somewhat like this:
</span><span class='line'>
</span><span class='line'>&lt;rdf-snippet formats="application/ld+json,application/n-quads" prefixes="hydra"&gt;
</span><span class='line'>   &lt;script type="text/turtle"&gt;
</span><span class='line'>prefix hydra: &lt;http://www.w3.org/ns/hydra/core#&gt;
</span><span class='line'>prefix wd:    &lt;http://www.wikidata.org/entity/&gt;
</span><span class='line'>prefix rdfs:  &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
</span><span class='line'>
</span><span class='line'>&lt;https://example.app/countries&gt;
</span><span class='line'>  a hydra:Collection ;
</span><span class='line'>  hydra:member wd:Q36 , wd:Q183 , wd:Q145 ;
</span><span class='line'>  hydra:totalItems 171 ;
</span><span class='line'>.
</span><span class='line'>
</span><span class='line'>wd:Q36 rdfs:label "Poland"@en , "Polska"@pl , "Polen"@de .
</span><span class='line'>wd:Q183 rdfs:label "Germany"@en , "Niemcy"@pl , "Deutschland"@de .
</span><span class='line'>wd:Q145 rdfs:label "United Kingdom"@en , "Zjednoczone Królestwo"@pl , "Vereinigtes Königreich"@de .
</span><span class='line'>   &lt;/script&gt;
</span><span class='line'>&lt;/rdf-snippet&gt;
</span><span class='line'>
</span><span class='line'>## APIs are dead; Long live (Linked Data) APIs!
</span><span class='line'>
</span><span class='line'>![linked data mug](https://hydra.t-code.pl/img/linked_data.jpg)
</span><span class='line'>
</span><span class='line'>So far the subject was APIs, but the web is more than just servers returning data, even if that data is RDF. You see, the hypothetical registration form above actually references a third party dataset, which is Wikidata. All of this data is already on the web and use standard formats. By using a simple SPARQL query the countries can be [fetched directly from their source](https://w.wiki/rsz); without even adding the `/countries` resource to your API. Heck, the client appication would not need a dedicated API at all!
</span><span class='line'>
</span><span class='line'><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sparql'><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="c"># wd: and wdt: are implicitly added by wikidata&#39;s SPARQL endpoint</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="k">prefix</span><span class="w"> </span><span class="nn">hydra</span><span class="p">:</span><span class="w"> </span><span class="err">&amp;lt</span><span class="p">;</span><span class="err">http</span><span class="p">:</span><span class="o">//</span><span class="err">www</span><span class="p">.</span><span class="err">w</span><span class="mi">3</span><span class="p">.</span><span class="err">org</span><span class="o">/</span><span class="err">ns</span><span class="o">/</span><span class="err">hydr</span><span class="k">a</span><span class="o">/</span><span class="err">core</span><span class="c">#&amp;gt;</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="k">CONSTRUCT</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="w">  </span><span class="nv">?col</span><span class="w"> </span><span class="k">a</span><span class="w"> </span><span class="nn">hydra</span><span class="p">:</span><span class="nt">Collection</span><span class="w"> </span><span class="p">.</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="w">  </span><span class="nv">?col</span><span class="w"> </span><span class="nn">hydra</span><span class="p">:</span><span class="nt">member</span><span class="w"> </span><span class="nv">?country</span><span class="w"> </span><span class="p">.</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="w">  </span><span class="nv">?country</span><span class="w"> </span><span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span><span class="w"> </span><span class="nv">?label</span><span class="w"> </span><span class="p">.</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="p">}</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="w">  </span><span class="k">BIND</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="err">&amp;lt</span><span class="p">;</span><span class="err">https</span><span class="p">:</span><span class="o">//</span><span class="err">ex</span><span class="k">a</span><span class="err">mple</span><span class="p">.</span><span class="k">a</span><span class="err">pp</span><span class="o">/</span><span class="err">countries&amp;gt</span><span class="p">;</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nv">?col</span><span class="w"> </span><span class="p">)</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="w">  </span><span class="c"># wdt:P31 - &quot;instance of&quot;</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="w">  </span><span class="c"># wd:Q6256 - &quot;country&quot;</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="w">  </span><span class="nv">?country</span><span class="w"> </span><span class="nn">wdt</span><span class="p">:</span><span class="nt">P31</span><span class="w"> </span><span class="nn">wd</span><span class="p">:</span><span class="nt">Q6256</span><span class="w"> </span><span class="p">;</span><span class="w"> </span><span class="nn">rdfs</span><span class="p">:</span><span class="nt">label</span><span class="w"> </span><span class="nv">?label</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="w">  </span><span class="c"># only request labels in a handful of languages</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="w">  </span><span class="c"># to dramatically reduce response size</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="w">  </span><span class="k">FILTER</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="nf">lang</span><span class="p">(</span><span class="nv">?label</span><span class="p">)</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="s">&#39;en&#39;</span><span class="p">,</span><span class="w"> </span><span class="s">&#39;de&#39;</span><span class="p">,</span><span class="w"> </span><span class="s">&#39;fr&#39;</span><span class="p">,</span><span class="w"> </span><span class="s">&#39;pl&#39;</span><span class="p">,</span><span class="w"> </span><span class="s">&#39;es&#39;</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="p">}</span><span class="w"></span>
</span><span class='line'><span class="nl">&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure>
</span><span class='line'>
</span><span class='line'>This query can be directly encoded in a URL to GET the countries and populate a dropdown component. You can see that in the [playground][playground], mentioned in the beginning.
</span><span class='line'>
</span><span class='line'>All possible thanks to web standards 🤘
</span><span class='line'>
</span><span class='line'>## Implementation notes
</span><span class='line'>
</span><span class='line'>Shaperone makes building a Hydra-aware form like this easy:
</span></code></pre></td></tr></table></div></figure></notextile></div>ts
import * as components from '@hydrofoil/shaperone-wc/NativeComponents'
// OR import * as components from '@hydrofoil/shaperone-wc-material/components'
// OR import * as components from '@hydrofoil/shaperone-wc-vaadin/components'
// OR roll your own rendering components
import * as configure from '@hydrofoil/shaperone-wc/configure'
import { instancesSelector } from '@hydrofoil/shaperone-hydra/components'

// register UI component which will do the rendering
configure.components.pushComponents(components)

// add Hydra extension to dash:InstancesSelectEditor
configure.editors.decorate(instancesSelector.matcher)
configure.components.decorate(instancesSelector.decorator())
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>The `@hydrofoil/shaperone-hydra` package extends the default behaviour to have `hydra:collection` dereferenced rather than looking for the instance data locally.
</span><span class='line'>
</span><span class='line'>## Next steps
</span><span class='line'>
</span><span class='line'>In future posts I will present how to:
</span><span class='line'>
</span><span class='line'>2. use Hydra descriptions to find collections without `hydra:collection` directly
</span><span class='line'>3. `hydra:search` URI Templates can be used to:
</span><span class='line'>   - create forms with dependent fields, so that users first select a country which is then used to narrow down a selection of country's secondary administrative division and so on **[POST](/blog/2020/12/hydra-shacl-templates)**
</span><span class='line'>   - improve performance by filtering resources on the data source
</span><span class='line'>
</span><span class='line'>&lt;script src="/components/rdf-snippet.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;/User&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>    &lt;title type="html"&gt;&lt;![CDATA[Testing APIs Hypermedia-style]]&gt;&lt;/title&gt;
</span><span class='line'>    &lt;link href="http://t-code.pl/blog/2019/06/testing-hypermedia-api/"/&gt;
</span><span class='line'>    &lt;updated&gt;2019-06-27T12:15:00+00:00&lt;/updated&gt;
</span><span class='line'>    &lt;id&gt;http://t-code.pl/blog/2019/06/testing-hypermedia-api&lt;/id&gt;
</span><span class='line'>    &lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;One would expect the task of (REST) API testing to be a well-researched subject. After all, REST has been formulated over a
</span><span class='line'>decade ago and the number of APIs being built keeps growing exponentially. Yet, it seems that the art of testing APIs hasn’t
</span><span class='line'>changed much from the approaches used in testing RPC-style APIs or non-API code.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;In this post I’d like to propose a different approach to defining and executing tests of a truly RESTful, hypermedia-driven API.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="recap-what-is-a-hypermedia-driven-api"&gt;Recap. What is a Hypermedia-driven API?&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;The Hypermedia REST constraint, originally called &lt;code&gt;Hypermedia As The Engine of Application State&lt;/code&gt; by Roy Fielding, is probably 
</span><span class='line'>easiest to grasp through the maxim &lt;strong&gt;follow your nose&lt;/strong&gt;. It means that a client should base the subsequent state changes
</span><span class='line'>(server requests) solely on information gathered from previously received resource representations. The information
</span><span class='line'>available depends on the media type being used. Different media types may provide a different degree of hypermedia support.
</span><span class='line'>The facets have been gathered by Mike Amundsen in his &lt;a href="http://amundsen.com/hypermedia/hfactor/"&gt;H Factor&lt;/a&gt; measurement model.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;For example, the simple but popular media type &lt;a href="http://stateless.co/hal_specification.html"&gt;HAL&lt;/a&gt; supports links, which lets clients follow them without a priori
</span><span class='line'>knowledge about specific URLs. All they need to know is a &lt;a href="https://www.iana.org/assignments/link-relations"&gt;link relation&lt;/a&gt; name, and look for that link in the resource
</span><span class='line'>representation. What’s more, the links can appear and disappear in said representations based on resource’s state or the
</span><span class='line'>user’s permissions. An adaptive client should only follow links which are present at the given moment.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;More sophisticated media types would also provide forms, such as &lt;code&gt;&lt;form&gt;&lt;/code&gt; in HTML, which allow clients to perform requests
</span><span class='line'>with methods different than &lt;code&gt;GET&lt;/code&gt; to change the state of resources.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="problem-with-existing-testing-tools"&gt;Problem with existing testing tools&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;There are multiple popular tools used for testing APIs. Some of the names include &lt;a href="https://www.getpostman.com"&gt;Postman&lt;/a&gt;, &lt;a href="http://rest-assured.io"&gt;REST Assured&lt;/a&gt;,
</span><span class='line'>&lt;a href="https://intuit.github.io/karate/"&gt;Karate&lt;/a&gt; or &lt;a href="https://www.soapui.org"&gt;SoapUI&lt;/a&gt;. Each one of these tool has their respective strengths and characteristics, but they
</span><span class='line'>all share a similar flaw: they revolve around URI of individual resources and test them in isolation. While it may sound
</span><span class='line'>good from a unit testing perspective, it’s pretty obvious that API tests will always be integration tests. Focusing on a resource
</span><span class='line'>identifier prevents the tests from taking advantage of rich hypermedia controls. Those cannot be easily tested, even if 
</span><span class='line'>the API under test uses a hypermedia media type. Such tests will mostly only reach level 3 of &lt;a href="https://martinfowler.com/articles/richardsonMaturityModel.html"&gt;Richardson Maturity Model&lt;/a&gt;.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="https://martinfowler.com/articles/images/richardsonMaturityModel/overview.png" alt="Richardson Maturity Model" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="test-by-following-your-nose"&gt;Test by following your nose&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;To overcome this problem I propose a different approach to building an API test suite. Most importantly, the test executor
</span><span class='line'>must act just like a hypermedia-aware client. It should only ever follow links and submit forms found in received resource
</span><span class='line'>representations. It also should never begin testing from any random URL because a REST API should only ever advertise just
</span><span class='line'>a single stable home URL.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Thus, a test scenario must begin with requesting the aforementioned initial resource and making its way through other
</span><span class='line'>representations via links and forms. I call this &lt;strong&gt;What you &lt;code&gt;GET&lt;/code&gt; is what you test&lt;/strong&gt; which would be abbreviated &lt;code&gt;WYGIWYT&lt;/code&gt;,
</span><span class='line'>taking after the ancient web development acronym.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3 id="wygiwyt-dsl"&gt;&lt;code&gt;WYGIWYT&lt;/code&gt; DSL&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;To make this approach I propose a completely new DSL, or domain-specific language, which can capture the nature of
</span><span class='line'>transitioning between resource representations.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;The most basic building block would be to define expected hypermedia controls at the root of a test definition. Such top-level
</span><span class='line'>(or ambient) declaration would be eagerly executed whenever it is encountered in any resource.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;For example, the below snippet could instruct the runner to follow every &lt;a href="http://www.w3.org/TR/html5/links.html#link-type-author"&gt;&lt;code&gt;author&lt;/code&gt;&lt;/a&gt;
</span><span class='line'>link and assert that it responds with a &lt;code&gt;200&lt;/code&gt; HTTP status code:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;
</span><span class='line'>Follow Link author every time {
</span><span class='line'>    Expect status code 200
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;In more complex scenarios, such as involving creating and removal of resources, a nested structure would help build a
</span><span class='line'>sequence of related requests. Here’s how I imagine a complete workflow:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```
</span><span class='line'>With class Person {
</span><span class='line'>    Expect Identifier [person]&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;With Form addFriend {
</span><span class='line'>    Submit application/x-www-form-urlencoded 
</span><span class='line'>    (
</span><span class='line'>        newFriendId=/id/of/friend/
</span><span class='line'>    ) {
</span><span class='line'>        Expect Status Code 201
</span><span class='line'>        Expect Header Location [newFriend]
</span><span class='line'>        
</span><span class='line'>        Follow [newFriend] {
</span><span class='line'>            Expect Property friend /id/of/friend/
</span><span class='line'>            Expect Property friendOf [person]
</span><span class='line'>        
</span><span class='line'>            With Form delete {
</span><span class='line'>                Submit {
</span><span class='line'>                    Expect Status Code 204
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>} } ```
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;This is just a pseudocode draft but the intention is to keep a clear structure which should read like natural language.
</span><span class='line'>This example should be interpreted as:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>  &lt;li&gt;When you find a &lt;code&gt;Person&lt;/code&gt; resource, remember its identifier as &lt;code&gt;person&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;If it contains an &lt;code&gt;addFriend&lt;/code&gt; form, submit it with a given body&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;Check that a resource has been created and &lt;code&gt;GET&lt;/code&gt; it by following the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Location"&gt;&lt;code&gt;Location&lt;/code&gt; header&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;Verify that it has been created with certain properties&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;Use the &lt;code&gt;delete&lt;/code&gt; form to remove that resource&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="some-notes-on-the-dsl"&gt;Some notes on the DSL&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;It is clear that media types are not made equal. They also use various names for similar concepts (eg. &lt;code&gt;form&lt;/code&gt; vs &lt;code&gt;operation&lt;/code&gt;
</span><span class='line'>vs &lt;code&gt;action&lt;/code&gt;). While the initial version will focus on &lt;a href="http://www.hydra-cg.com"&gt;Hydra&lt;/a&gt;, the DSL should become customizable to
</span><span class='line'>allow plug-in support for other specific media types.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Individual runners would also need to implement media type-specific ways for discovering the hypermedia.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;The DSL will then be compiled to a JSON structure, which shall simplify the implementation of runners.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="next-steps"&gt;Next steps&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;We are starting to build the DSL with &lt;a href="https://www.eclipse.org/Xtext/"&gt;Eclipse Xtext&lt;/a&gt; and generators with &lt;a href="https://www.eclipse.org/xtend/"&gt;Xtend&lt;/a&gt;. Those are very mature
</span><span class='line'>DSL tools, probably the most sophisticated out there.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Work has also commenced on prototyping a runner targetting Hydra under 
</span><span class='line'>&lt;a href="https://github.com/hypermedia-app/hydra-validator/"&gt;https://github.com/hypermedia-app/hydra-validator/&lt;/a&gt;.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="related-research"&gt;Related research&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;There seems to be just a handful of research papers and even less development going on around testing hypermedia APIs.
</span><span class='line'>The problem with research papers is also that most of them don’t really produce concrete, runnable tools. The only one that
</span><span class='line'>does from those mentioned below, is apparently not available for download.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;A fairly recent library exists, called &lt;a href="https://github.com/Tabcorp/hyperactive"&gt;Hyperactive&lt;/a&gt;. It crawls an API to check
</span><span class='line'>that the links are not broken between resources. Unfortunately it is essentially just that, a simple crawler.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;A similar paper has been published in 2010 titled &lt;a href="https://www.researchgate.net/publication/220796420_Connectedness_testing_of_RESTful_web-services"&gt;Connectedness testing of RESTful web-services&lt;/a&gt;
</span><span class='line'>by Sujit Chakrabarti of Bangalore. The approach the authors take is quite similar to the proposed DSL. The downside,
</span><span class='line'>shown also in the papers I mention below, is that it seems to be tightly coupled to URL structures and specific implementation
</span><span class='line'>details, such as HTTP methods. Our approach differs in that it should rely more on the hypermedia control rather than
</span><span class='line'>out-of-band information.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Another, quite promising paper is &lt;a href="https://www.semanticscholar.org/paper/Model-Based-Testing-of-RESTful-Web-Services-Using-Pinheiro-Endo/4824acc46b9454da7c81e57a9c8eea3a1795bb90"&gt;Model-Based Testing of RESTful Web Services Using UML Protocol State Machines&lt;/a&gt;
</span><span class='line'>by Pedro Victor Pontes Pinheiro, André Takeshi Endo, Adenilso da Silva Simão, published in 2013. Instead of DSL, UML diagrams
</span><span class='line'>are used to build the interaction paths. Other than that it seems that the proposed tool (I could not find the code) has
</span><span class='line'>some good features, including coverage. The presented approach does not seem suffer from the problem of hardcoding URLs, etc.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;There’s also &lt;a href="https://link.springer.com/chapter/10.1007/978-3-642-22110-1_43"&gt;Formalization and Automated Verification of RESTful Behavior&lt;/a&gt; by Uri Klein and Kedar S. Namjoshi which
</span><span class='line'>unfortunately is exceedingly scientific, as the name rightfully implies, riddled with cryptic mathematical-esque formulas.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Finally, 2017’s &lt;a href="https://link.springer.com/article/10.1007/s10270-017-0647-0"&gt;Towards Property-Based Testing of RESTful Web Services&lt;/a&gt; by Pablo Lamela Seijas, Huiqing Li and
</span><span class='line'>Simon Thompson proposes an Erlang-based DSL. Unfortunately the resulting syntax is hardly welcoming, and the approach in
</span><span class='line'>general is again in opposition to hypermedia controls. The shown examples are limited to JSON and revolve around URIs and
</span><span class='line'>hardcoded HTTP methods.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>    &lt;title type="html"&gt;&lt;![CDATA[Consuming hypermedia - declarative UI]]&gt;&lt;/title&gt;
</span><span class='line'>    &lt;link href="http://t-code.pl/blog/2016/04/hypermedia-driven-ui/"/&gt;
</span><span class='line'>    &lt;updated&gt;2016-04-30T22:25:00+00:00&lt;/updated&gt;
</span><span class='line'>    &lt;id&gt;http://t-code.pl/blog/2016/04/hypermedia-driven-ui&lt;/id&gt;
</span><span class='line'>    &lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;I’ve been going on about hypermedia for a long time now. I’ve touched both client and server side in terms of processing
</span><span class='line'>resource representations. There is however a big missing piece in how developers should build user interfaces. Personally
</span><span class='line'>I have been hooked on the idea of &lt;a href="http://webcomponents.org/"&gt;Web Components&lt;/a&gt; and I’ve had some success experimenting with using a declarative
</span><span class='line'>way for defining User Interface building blocks.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="declarative-views-for-resource-representations"&gt;Declarative views for resource representations&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Assuming the use of RDF (&lt;a href="https://www.w3.org/RDF/"&gt;Resource Description Framework&lt;/a&gt;), the user interface can be defined by creating a template
</span><span class='line'>for given RDF class or data type. A few examples can include: &lt;img class="emoji" title=":one:" alt=":one:" src="https://assets.github.com/images/icons/emoji/unicode/0031-20e3.png" height="20" width="20" align="absmiddle" /&gt; a dedicated custom element for displaying a person,
</span><span class='line'>&lt;img class="emoji" title=":two:" alt=":two:" src="https://assets.github.com/images/icons/emoji/unicode/0032-20e3.png" height="20" width="20" align="absmiddle" /&gt; a lightbox element for images typed as &lt;code&gt;schema:ImageObject&lt;/code&gt; or &lt;img class="emoji" title=":three:" alt=":three:" src="https://assets.github.com/images/icons/emoji/unicode/0033-20e3.png" height="20" width="20" align="absmiddle" /&gt; custom datepicker for &lt;code&gt;xsd:date&lt;/code&gt;.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;My idea for such syntax is to extend the &lt;code&gt;&lt;template&gt;&lt;/code&gt; tag so that whenever it is added to DOM, it somehow registers itself
</span><span class='line'>for use in specific case. Because the template tag itself is quite dumb I would take advantage of &lt;a href="http://polymer-project.org"&gt;Polymer&lt;/a&gt; data
</span><span class='line'>binding features and &lt;a href="http://t-code.pl/blog/2015/08/polymer-templatizer/"&gt;&lt;code&gt;Polymer.templatizer&lt;/code&gt;&lt;/a&gt; so that developers can define dynamic templates.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;At the top level, I envision a generic &lt;code&gt;&lt;object-view&gt;&lt;/code&gt; element. It would inspect the given resource and choose among the
</span><span class='line'>available specialized or generic templates (see further down).&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;``` html&lt;/p&gt;
</span><span class='line'>&lt;object-view id="top-view"&gt;&lt;/object-view&gt;
</span><span class='line'>
</span><span class='line'>&lt;script&gt;
</span><span class='line'>    var objectView = document.getElementById('top-view');
</span><span class='line'>    
</span><span class='line'>    objectView.object = {
</span><span class='line'>        "@type": "http://example.com/vocab#Person",
</span><span class='line'>        "@id": "http://example.com/tomasz",
</span><span class='line'>        "http://example.com/vocab#name": { 
</span><span class='line'>            "@value": "Tomasz Pluskiewicz" 
</span><span class='line'>        },
</span><span class='line'>        "http://example.com/vocab#website": { 
</span><span class='line'>            "@value": "http://t-code.pl" 
</span><span class='line'>        },
</span><span class='line'>        "http://example.com/vocab#avatar": {
</span><span class='line'>            "@type": "http://schema.org/ImageObject",
</span><span class='line'>            "http://schema.org/caption": { 
</span><span class='line'>                "@value": "Me in Kraków" 
</span><span class='line'>            },
</span><span class='line'>            "http://schema.org/contentUrl": { 
</span><span class='line'>                "@value": "http://example.com/tomasz/avatar-large.jpg" 
</span><span class='line'>            },
</span><span class='line'>            "http://schema.org/thumbnail": {
</span><span class='line'>                "http://schema.org/contentUrl": { 
</span><span class='line'>                    "@value": "http://example.com/tomasz/avatar-small.jpg" 
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    };
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;By setting the &lt;code&gt;objectView.resource&lt;/code&gt; property the element would then look for template dedicated to the &lt;code&gt;ex:Person&lt;/code&gt; class
</span><span class='line'>(example &lt;img class="emoji" title=":one:" alt=":one:" src="https://assets.github.com/images/icons/emoji/unicode/0031-20e3.png" height="20" width="20" align="absmiddle" /&gt;):&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;``` html&lt;/p&gt;
</span><span class='line'>&lt;template is="resource-view-template" type="http://example.com/vocab#Person" as="person" compact-with="{ &quot;@vocab&quot;: &quot;http://example.com/vocab#&quot; }"&gt;
</span><span class='line'>    &lt;h2&gt;
</span><span class='line'>        [[person.name]]
</span><span class='line'>    &lt;/h2&gt;
</span><span class='line'>    &lt;div class="details"&gt;
</span><span class='line'>        &lt;a href="[[person.website]]"&gt;My website&lt;/a&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>    &lt;div class="avatar"&gt;
</span><span class='line'>        &lt;object-view object="[[person.avatar]]"&gt;&lt;/object-view&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>&lt;/template&gt;
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;See the &lt;code&gt;&lt;object-view&gt;&lt;/code&gt; used again for &lt;code&gt;person.avatar&lt;/code&gt;? This way it would be possible to create composable user interface
</span><span class='line'>with specialized building blocks. Here’s how a template for &lt;code&gt;schema:ImageObject&lt;/code&gt; can be rendered as a kind of a lightbox
</span><span class='line'>(example &lt;img class="emoji" title=":two:" alt=":two:" src="https://assets.github.com/images/icons/emoji/unicode/0032-20e3.png" height="20" width="20" align="absmiddle" /&gt;):&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;``` html&lt;/p&gt;
</span><span class='line'>&lt;template is="resource-view-template" type="http://schema.org/ImageObject" as="img" compact-with="{ &quot;@vocab&quot;: &quot;http://schema.org&quot; }"&gt;
</span><span class='line'>    &lt;a title="[[img.caption]]" href="[[img.contentUrl]]"&gt;
</span><span class='line'>        &lt;img src="[[img.thumbnail.contentUrl]]" alt="[[img.caption]]" /&gt;
</span><span class='line'>    &lt;/a&gt;
</span><span class='line'>&lt;/template&gt;
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;A simple proof of concept is available &lt;a href="http://plnkr.co/edit/pQ6NOd"&gt;on Plunker&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3 id="template-selection-api"&gt;Template selection API&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Further extensions could introduce new ways for selecting a template based on the resource content, based on the predicate
</span><span class='line'>(&lt;em&gt;for example to use different template for property &lt;code&gt;ex:husband&lt;/code&gt; vs property &lt;code&gt;ex:wife&lt;/code&gt;)&lt;/em&gt; or to be able to create templates
</span><span class='line'>not only for resources but also for literals (&lt;em&gt;for example to select templates based on language tag?&lt;/em&gt;)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="common-elements-for-hydra-core-types"&gt;Common elements for Hydra Core types&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Building on top of the API above it would be possible to created predefined common elements for &lt;a href="http://hydra-cg.com"&gt;Hydra Core&lt;/a&gt; resources
</span><span class='line'>returned by &lt;a href="http://github.com/wikibus/heracles"&gt;heracles&lt;/a&gt;. The most obvious idea is to build a reusable template for a &lt;code&gt;hydra:Collection&lt;/code&gt;:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;``` html
</span><span class='line'>&lt;!-- first template for collection elements --&gt;&lt;/p&gt;
</span><span class='line'>&lt;template is="resource-view-template" type="https://www.w3.org/ns/hydra/core#Collection" as="collection" compact-with="http://www.w3.org/ns/hydra/context.jsonld"&gt;
</span><span class='line'>          
</span><span class='line'>    &lt;template is="dom-repeat" items="[[collection.member]]" as="member"&gt;
</span><span class='line'>        &lt;object-view object="[[member]]"&gt;&lt;/object-view&gt;
</span><span class='line'>    &lt;/template&gt;
</span><span class='line'>    
</span><span class='line'>    &lt;div class="pager"&gt;
</span><span class='line'>        &lt;object-view object="[[collection.view]]"&gt;&lt;/object-view&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>&lt;/template&gt;
</span><span class='line'>
</span><span class='line'>&lt;!-- views can have specialized templates --&gt;
</span><span class='line'>&lt;!-- the current spec defines the PartialCollectionView type --&gt;
</span><span class='line'>&lt;template is="resource-view-template" type="https://www.w3.org/ns/hydra/core#PartialCollectionView" as="view"&gt;
</span><span class='line'>    &lt;a href="[[view.first]]"&gt;First&lt;/a&gt;
</span><span class='line'>    &lt;a href="[[view.previous]]"&gt;Previous&lt;/a&gt;
</span><span class='line'>    &lt;a href="[[view.next]]"&gt;Next&lt;/a&gt;
</span><span class='line'>    &lt;a href="[[view.last]]"&gt;Last&lt;/a&gt;
</span><span class='line'>&lt;/template&gt;
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;See how again the &lt;code&gt;&lt;object-view&gt;&lt;/code&gt; is used to delegate the decision on what template to render.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Obviously real life Hydra templates will need to be much more sophisticated. Template for &lt;code&gt;hydra:PartialCollectionView&lt;/code&gt;
</span><span class='line'>would definitely want to hide unnecessary link. Template for &lt;code&gt;hydra:Collection&lt;/code&gt; would likely display a different view for
</span><span class='line'>collection member from the view displaying the same object outside a collection. This could be a feature of the &lt;code&gt;&lt;object-view&gt;&lt;/code&gt;
</span><span class='line'>element though.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="distributing-templates"&gt;Distributing templates&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Finally one wouldn’t want to declare these templates every time in an application. I imagine that a package containing
</span><span class='line'>reusable Hydra Core elements would be simply wired up by a single element:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;``` html
</span><span class='line'>&lt;!-- drop this on a page, and the above templates would be --&gt; 
</span><span class='line'>&lt;!-- available for &lt;object-view&gt; elements --&gt;&lt;/p&gt;
</span><span class='line'>&lt;hydra-core-templates&gt;&lt;/hydra-core-templates&gt;
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Similar element could be offered by data publishers somewhat satisfying the REST’s code-on-demand constraint.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;It is unclear however how it would be possible to customize behaviour of those templates/elements. Overriding the selected
</span><span class='line'>template could be an easy way out though…&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>    &lt;title type="html"&gt;&lt;![CDATA[Third labour of hypermedia - extensible media types]]&gt;&lt;/title&gt;
</span><span class='line'>    &lt;link href="http://t-code.pl/blog/2016/04/hypermedia-must-be-extensible/"/&gt;
</span><span class='line'>    &lt;updated&gt;2016-04-24T16:00:00+00:00&lt;/updated&gt;
</span><span class='line'>    &lt;id&gt;http://t-code.pl/blog/2016/04/hypermedia-must-be-extensible&lt;/id&gt;
</span><span class='line'>    &lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;Most hypermedia media types like [HAL][HAL] or [SIREN][SIREN] are some sort of extension of JSON, which is understandable.
</span><span class='line'>JSON is a natural choice because it already is the most common data interchange format for APIs. However JSON as syntax 
</span><span class='line'>is by design simple and it doesn’t support vital part - &lt;strong&gt;links&lt;/strong&gt;. To plug that hole these media types are intrusive in
</span><span class='line'>that they impose a very specific structure of documents. Instead of extending the meaning of representations they hijack
</span><span class='line'>the syntax and structure.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Personally I’m biased towards [Hydra Core Vocabulary][hydra] because, unlike all other I have come across, it is based on
</span><span class='line'>RDF. Why is it important?&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="extending-json-creates-rigid-structures"&gt;Extending JSON creates rigid structures&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Consider this sample from HAL specification website (excerpt).&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span><span class="p">{</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>    <span class="err">“_links”:</span> <span class="err">{</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>        <span class="err">“self”:</span> <span class="err">{</span> <span class="err">“href”:</span> <span class="err">“/orders”</span> <span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>        <span class="err">“curies”:</span> <span class="p">[{</span> <span class="err">“name”:</span> <span class="err">“ea”,</span> <span class="err">“href”:</span> <span class="err">“http://example.com/docs/rels/{rel</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="err">“templated”:</span> <span class="kc">true</span> <span class="err">}</span><span class="p">]</span><span class="err">,</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>        <span class="err">“next”:</span> <span class="p">{</span> <span class="err">“href”:</span> <span class="err">“/orders?page=2”</span> <span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>        <span class="err">“ea:find”:</span> <span class="p">{</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>            <span class="err">“href”:</span> <span class="err">“/orders{?id</span><span class="p">}</span><span class="err">”,</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>            <span class="err">“templated”:</span> <span class="kc">true</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>        <span class="err">},</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>        <span class="err">“ea:admin”:</span> <span class="p">[{</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>            <span class="err">“href”:</span> <span class="err">“/admins/2”,</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>            <span class="err">“title”:</span> <span class="err">“Fred”</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>        <span class="p">}]</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>    <span class="err">},</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>    <span class="err">“currentlyProcessing”:</span> <span class="mi">14</span><span class="err">,</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>    <span class="err">“shippedToday”:</span> <span class="mi">20</span><span class="err">,</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>    <span class="err">“_embedded”:</span> <span class="p">{</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>        <span class="err">“ea:order”:</span> <span class="err">[{</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>            <span class="err">“_links”:</span> <span class="err">{</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>                <span class="err">“self”:</span> <span class="err">{</span> <span class="err">“href”:</span> <span class="err">“/orders/123”</span> <span class="p">}</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>            <span class="err">},</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>            <span class="err">“total”:</span> <span class="mf">30.00</span><span class="err">,</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>            <span class="err">“currency”:</span> <span class="err">“USD”,</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>            <span class="err">“status”:</span> <span class="err">“shipped”</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>        <span class="err">}]</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>    <span class="err">}</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;}</span>
</span><span class='line'><span class="err">&lt;/span&gt;&lt;span</span> <span class="err">class=&#39;line&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;What is all that business with &lt;code&gt;_links&lt;/code&gt; and &lt;code&gt;_embedded&lt;/code&gt;? Also would you prefer to serve or consume XML for some reason?
</span><span class='line'>Well, that will not be possible because most other media types above, except Hydra, HAL is JSON-based. Hence the need for
</span><span class='line'>that convoluted document structure.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;JSON also suffers from another deficiency - key ambiguity. It would be very easy to bump into clashes if we were to enrich
</span><span class='line'>such representations with custom extensions.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="rdf-is-not-syntax"&gt;RDF is not syntax&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;I wrote that Hydra Core is RDF-based. Unlike JSON RDF is a standard way to describe data structures and not syntax. It is
</span><span class='line'>possible to write the very same piece of data in a multitude of ways yet still retaining the exact same meaning. First
</span><span class='line'>there are [&lt;strong&gt;n-triples&lt;/strong&gt;][nt]. Let’s state that my name is &lt;em&gt;Tomasz&lt;/em&gt; and my friend can be downloaded from &lt;code&gt;http://t-code.pl/tomasz/friends&lt;/code&gt;.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;text
</span><span class='line'>&lt;http://t-code.pl/tomasz&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; "Tomasz" .
</span><span class='line'>&lt;http://t-code.pl/tomasz&gt; &lt;http://t-code.pl/api#friends&gt; &lt;http://t-code.pl/tomasz/friends&gt; .
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;As you see almost everything is an URI. This solves the ambiguity problem. This is however very verbose and redundant and
</span><span class='line'>will waste a lot od bandwidth for large response. Fortunately there are other media types, which can represent the same
</span><span class='line'>information in different form. There is the compacted flavour of n-triples called [&lt;strong&gt;Turtle&lt;/strong&gt;][ttl] and it’s similar twin
</span><span class='line'>[&lt;strong&gt;Notation3&lt;/strong&gt;][n3].&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;``` text
</span><span class='line'>@base &lt;a href="http://t-code.pl/"&gt;http://t-code.pl/&lt;/a&gt; .
</span><span class='line'>@prefix foaf: &lt;a href="http://xmlns.com/foaf/0.1/"&gt;http://xmlns.com/foaf/0.1/&lt;/a&gt; .
</span><span class='line'>@prefix api: &lt;a href="http://t-code.pl/api#"&gt;http://t-code.pl/api#&lt;/a&gt; .&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;tomasz&gt; foaf:name "Tomasz" ;
</span><span class='line'>         api:friends &lt;tomasz/friends&gt; .</span></code></pre></td></tr></table></div></figure></notextile></div>

There is also the old school XML-based format called [**RDF/XML**][rdfxml].

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;rdf:RDF</span> <span class="na">xmlns:foaf=</span><span class="s">&quot;http://xmlns.com/foaf/0.1/&quot;</span> <span class="na">xmlns:api=</span><span class="s">&quot;http://t-code.pl/api#&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;rdf:Description</span> <span class="na">rdf:about=</span><span class="s">&quot;http://t-code.pl/tomasz&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;api:friends</span> <span class="na">rdf:resource=</span><span class="s">&quot;http://t-code.pl/tomasz/friends&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;foaf:name&gt;</span>Tomasz<span class="nt">&lt;/foaf:name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/rdf:Description&gt;</span>
</span><span class='line'><span class="nt">&lt;/rdf:RDF&gt;</span>
</span></code></pre></td></tr></table></div></figure>

And finally there are multiple JSON-based formats, the most prominent example being [**JSON-LD**][ld] which does a great
job pretending it is not really RDF.

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;@context&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;@base&quot;</span><span class="p">:</span> <span class="s2">&quot;http://t-code.pl/&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;http://xmlns.com/foaf/0.1/name&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;friends&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;@id&quot;</span><span class="p">:</span> <span class="s2">&quot;http://t-code.pl/api#friends&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;@type&quot;</span><span class="p">:</span> <span class="s2">&quot;@id&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;@id&quot;</span><span class="p">:</span> <span class="s2">&quot;tomasz&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Tomasz&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;friends&quot;</span><span class="p">:</span> <span class="s2">&quot;tomasz/friends&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

## Hydra extends meaning not syntax

What Hydra core does is essentially extend the data (**not the syntax**) with various hint for the clients so that they
can discover how to perform more requests. For example let's add a hypermedia control stating that the above resource
`<tomasz>` can be updated with a `PUT` request.

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;@context&quot;</span><span class="p">:</span> <span class="s2">&quot;http://same.as.above/but/remote&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;@id&quot;</span><span class="p">:</span> <span class="s2">&quot;tomasz&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Tomasz&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;friends&quot;</span><span class="p">:</span> <span class="s2">&quot;tomasz/friends&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;http://www.w3.org/ns/hydra/core#operation&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;http://www.w3.org/ns/hydra/core#method&quot;</span><span class="p">:</span> <span class="s2">&quot;PUT&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;http://www.w3.org/ns/hydra/core#expects&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;@id&quot;</span><span class="p">:</span> <span class="s2">&quot;http://t-code.pl/api#Person&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

You could still convert this between various RDF serailizations and retain the meaning!

For a Hydra-based API to be complete there must be a lot of information provided by the server. The above is the tip of
the iceberg. The body of the described `PUT` request must conform the definition of the `http://t-code.pl/api#Person` type.

&gt; But where is this definition? And how detailed can this definition be? 
 
Hydra core is served as a runtime API documentation, linked with a specific Link header relation. This documentation can
contain a number of simple definitions such as required fields, expected data types etc. It can also be extended so that
clients aware of the extension can adapt better to the API. For example a server can annotate a field as being a password,
so that an appropriate control is presented on the website.

This is where the first really big hurdle stands. 

&gt; Where are these aware clients? And where are the servers? 

## We need the tooling

I've started creating both a server and client tools to produce and consume Hydra-based hypermedia. The server side is 
implemented as a .NET Library for Nancy called [Argolis][Argolis]. The client side is a JavsScript library called 
[heracles][heracles]. I'm also experimenting with a way to produce a dynamic yet customizable UI with Web Components.

I will be showing usage examples and discussing ideas in future blog posts.

[HAL]: http://stateless.co/hal_specification.html
[coll]: http://amundsen.com/media-types/collection/
[SIREN]: https://github.com/kevinswiber/siren
[narwhl]: http://www.narwhl.com/
[hydra]: http://hydra-cg.com/spec/latest/core/
[nt]: https://www.w3.org/2001/sw/RDFCore/ntriples/
[n3]: https://www.w3.org/TeamSubmission/n3/
[ld]: http://json-ld.org
[ttl]: https://www.w3.org/TR/2014/REC-turtle-20140225/
[rdfxml]: https://www.w3.org/TR/2014/REC-rdf-syntax-grammar-20140225/
[heracles]: http://github/com/wikibus/heracles
[Argolis]: http://github/com/wikibus/Argolis
</tomasz></tomasz>
]]></content>
  </entry>
  
</feed>
